/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package medidordeenergia;

import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author Caio Barroso, Kreisler Brenner, Raphael Santos
 */
public class FPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FPrincipal
     */
   
    public FPrincipal() {
        initComponents();
//        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        lbStatus = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        PanelPaginaInicial = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        PanelDados = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbResultadosConsulta = new javax.swing.JTextArea();
        rbHora = new javax.swing.JRadioButton();
        rbDia = new javax.swing.JRadioButton();
        rbMes = new javax.swing.JRadioButton();
        lbDiaI = new javax.swing.JLabel();
        lbMesI = new javax.swing.JLabel();
        lbAnoI = new javax.swing.JLabel();
        lbHoraI = new javax.swing.JLabel();
        cbDiaI = new javax.swing.JComboBox();
        cbMesI = new javax.swing.JComboBox();
        spinnerAnoI = new javax.swing.JSpinner();
        spinnerHoraI = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        lbDiaF = new javax.swing.JLabel();
        lbMesF = new javax.swing.JLabel();
        lbAnoF = new javax.swing.JLabel();
        lbHoraF = new javax.swing.JLabel();
        spinnerHoraF = new javax.swing.JSpinner();
        spinnerAnoF = new javax.swing.JSpinner();
        cbMesF = new javax.swing.JComboBox();
        cbDiaF = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        PanelEstatisticas = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lbMinimo = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbMaximo = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lbMedia = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        btnMenuArquivo = new javax.swing.JMenu();
        btnMenuImportarDados = new javax.swing.JMenuItem();
        btnMenuExportarDados = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        btnMenuSair = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        btnMenuAjuda = new javax.swing.JMenuItem();
        btnMenuSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eletric Timer - Super Xoke Developers");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(51, 51, 51));
        setMinimumSize(new java.awt.Dimension(720, 480));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(209, 209, 209));
        jPanel5.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel5.setPreferredSize(new java.awt.Dimension(720, 480));

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setRollover(true);
        jToolBar1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jToolBar1.add(lbStatus);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setForeground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        jTabbedPane1.setInheritsPopupMenu(true);
        jTabbedPane1.setOpaque(true);

        PanelPaginaInicial.setBackground(new java.awt.Color(255, 255, 153));
        PanelPaginaInicial.setToolTipText("");
        PanelPaginaInicial.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        PanelPaginaInicial.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/simbolo2.png"))); // NOI18N
        PanelPaginaInicial.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png"))); // NOI18N
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PanelPaginaInicial.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, -1, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/import.png"))); // NOI18N
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusCycleRoot(true);
        jButton1.setFocusTraversalPolicyProvider(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        PanelPaginaInicial.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 280, 205, 70));

        jLabel2.setFont(new java.awt.Font("Gadugi", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setText("Bem vindo ao nosso sistema!");
        jLabel2.setFocusable(false);
        PanelPaginaInicial.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 180, 340, 50));

        jLabel5.setFont(new java.awt.Font("Segoe UI Light", 2, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 153, 153));
        jLabel5.setText("Super Xoke Developers");
        jLabel5.setFocusable(false);
        PanelPaginaInicial.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 100, 240, 50));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/help.png"))); // NOI18N
        jLabel14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        PanelPaginaInicial.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 50, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundo-cinza2.jpg"))); // NOI18N
        PanelPaginaInicial.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 720, 460));

        jTabbedPane1.addTab("Pagina Inicial   ", new javax.swing.ImageIcon(getClass().getResource("/img/icon2.png")), PanelPaginaInicial); // NOI18N

        PanelDados.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        PanelDados.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("Segoe UI Light", 0, 22)); // NOI18N
        jLabel9.setText("Intervalo:");
        PanelDados.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 70, -1, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI Light", 0, 22)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/lupa.png"))); // NOI18N
        jLabel11.setText("Consultar por:");
        PanelDados.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel15.setText("Inicial:");
        PanelDados.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 110, -1, -1));

        lbResultadosConsulta.setEditable(false);
        lbResultadosConsulta.setColumns(20);
        lbResultadosConsulta.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        lbResultadosConsulta.setForeground(new java.awt.Color(102, 102, 102));
        lbResultadosConsulta.setRows(5);
        jScrollPane1.setViewportView(lbResultadosConsulta);

        PanelDados.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, 396));

        buttonGroup1.add(rbHora);
        rbHora.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        rbHora.setSelected(true);
        rbHora.setText("Hora");
        rbHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHoraActionPerformed(evt);
            }
        });
        PanelDados.add(rbHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, -1, -1));

        buttonGroup1.add(rbDia);
        rbDia.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        rbDia.setText("Dia");
        rbDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDiaActionPerformed(evt);
            }
        });
        PanelDados.add(rbDia, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 40, -1, -1));

        buttonGroup1.add(rbMes);
        rbMes.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        rbMes.setText("Mês");
        rbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMesActionPerformed(evt);
            }
        });
        PanelDados.add(rbMes, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 40, -1, -1));

        lbDiaI.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        lbDiaI.setText("Dia");
        PanelDados.add(lbDiaI, new org.netbeans.lib.awtextra.AbsoluteConstraints(485, 140, 29, -1));

        lbMesI.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        lbMesI.setText("Mes");
        PanelDados.add(lbMesI, new org.netbeans.lib.awtextra.AbsoluteConstraints(532, 140, 31, -1));

        lbAnoI.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        lbAnoI.setText("Ano");
        PanelDados.add(lbAnoI, new org.netbeans.lib.awtextra.AbsoluteConstraints(581, 140, 31, -1));

        lbHoraI.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        lbHoraI.setText("Hora");
        PanelDados.add(lbHoraI, new org.netbeans.lib.awtextra.AbsoluteConstraints(633, 140, 35, -1));

        cbDiaI.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        PanelDados.add(cbDiaI, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 170, 45, 30));

        cbMesI.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        PanelDados.add(cbMesI, new org.netbeans.lib.awtextra.AbsoluteConstraints(528, 170, 45, 30));

        spinnerAnoI.setModel(new javax.swing.SpinnerListModel(new String[] {"2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024"}));
        spinnerAnoI.setFocusable(false);
        PanelDados.add(spinnerAnoI, new org.netbeans.lib.awtextra.AbsoluteConstraints(576, 170, 55, 30));

        spinnerHoraI.setModel(new javax.swing.SpinnerListModel(new String[] {"00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"}));
        spinnerHoraI.setFocusable(false);
        PanelDados.add(spinnerHoraI, new org.netbeans.lib.awtextra.AbsoluteConstraints(633, 170, 55, 30));

        jLabel10.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel10.setText("Final:");
        PanelDados.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 210, -1, -1));

        lbDiaF.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        lbDiaF.setText("Dia");
        PanelDados.add(lbDiaF, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 240, -1, -1));

        lbMesF.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        lbMesF.setText("Mes");
        PanelDados.add(lbMesF, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 240, -1, -1));

        lbAnoF.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        lbAnoF.setText("Ano");
        PanelDados.add(lbAnoF, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 240, -1, -1));

        lbHoraF.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        lbHoraF.setText("Hora");
        PanelDados.add(lbHoraF, new org.netbeans.lib.awtextra.AbsoluteConstraints(638, 240, -1, -1));

        spinnerHoraF.setModel(new javax.swing.SpinnerListModel(new String[] {"00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"}));
        spinnerHoraF.setFocusable(false);
        PanelDados.add(spinnerHoraF, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 270, 55, 30));

        spinnerAnoF.setModel(new javax.swing.SpinnerListModel(new String[] {"2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024"}));
        spinnerAnoF.setFocusable(false);
        PanelDados.add(spinnerAnoF, new org.netbeans.lib.awtextra.AbsoluteConstraints(576, 270, 55, 30));

        cbMesF.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        PanelDados.add(cbMesF, new org.netbeans.lib.awtextra.AbsoluteConstraints(528, 270, 45, 30));

        cbDiaF.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        PanelDados.add(cbDiaF, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 270, 45, 30));

        jButton3.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jButton3.setText("Consultar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        PanelDados.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 326, 203, 46));

        jTabbedPane1.addTab("Dados   ", new javax.swing.ImageIcon(getClass().getResource("/img/23960.png")), PanelDados); // NOI18N

        PanelEstatisticas.setBackground(new java.awt.Color(255, 255, 255));
        PanelEstatisticas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        PanelEstatisticas.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbMinimo.setEditable(false);
        lbMinimo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbMinimo.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        lbMinimo.setForeground(new java.awt.Color(255, 102, 0));
        lbMinimo.setToolTipText("");
        lbMinimo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(lbMinimo);

        PanelEstatisticas.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 130, 220, 240));

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 3, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Mínimos");
        PanelEstatisticas.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 100, -1, 20));

        lbMaximo.setEditable(false);
        lbMaximo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbMaximo.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        lbMaximo.setForeground(new java.awt.Color(255, 102, 0));
        lbMaximo.setToolTipText("");
        lbMaximo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(lbMaximo);

        PanelEstatisticas.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 220, 240));

        jLabel8.setFont(new java.awt.Font("Segoe UI Light", 3, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Máximos");
        PanelEstatisticas.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, -1, 20));

        lbMedia.setEditable(false);
        lbMedia.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbMedia.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        lbMedia.setForeground(new java.awt.Color(255, 102, 0));
        lbMedia.setToolTipText("");
        lbMedia.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane4.setViewportView(lbMedia);

        PanelEstatisticas.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 190, 30));

        jLabel7.setFont(new java.awt.Font("Segoe UI Light", 3, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Média");
        PanelEstatisticas.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 20));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/estatistica2.png"))); // NOI18N
        jLabel12.setToolTipText("");
        PanelEstatisticas.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundo estatistica.jpg"))); // NOI18N
        PanelEstatisticas.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 720, 430));

        jTabbedPane1.addTab("Estatisticas   ", new javax.swing.ImageIcon(getClass().getResource("/img/estat.png")), PanelEstatisticas); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 460));

        jMenuBar1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        jMenuBar1.setBorder(null);
        jMenuBar1.setForeground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        btnMenuArquivo.setBackground(new java.awt.Color(204, 204, 204));
        btnMenuArquivo.setForeground(new java.awt.Color(32, 32, 32));
        btnMenuArquivo.setText("Arquivo");
        btnMenuArquivo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        btnMenuImportarDados.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        btnMenuImportarDados.setText("Importar Dados..");
        btnMenuImportarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuImportarDadosActionPerformed(evt);
            }
        });
        btnMenuArquivo.add(btnMenuImportarDados);

        btnMenuExportarDados.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        btnMenuExportarDados.setText("Exportar Dados..");
        btnMenuExportarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuExportarDadosActionPerformed(evt);
            }
        });
        btnMenuArquivo.add(btnMenuExportarDados);
        btnMenuArquivo.add(jSeparator1);

        btnMenuSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, 0));
        btnMenuSair.setText("Sair");
        btnMenuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuSairActionPerformed(evt);
            }
        });
        btnMenuArquivo.add(btnMenuSair);

        jMenuBar1.add(btnMenuArquivo);

        jMenu3.setBackground(new java.awt.Color(204, 204, 204));
        jMenu3.setForeground(new java.awt.Color(32, 32, 32));
        jMenu3.setText("Ajuda");
        jMenu3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        btnMenuAjuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        btnMenuAjuda.setText("Ajuda");
        btnMenuAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuAjudaActionPerformed(evt);
            }
        });
        jMenu3.add(btnMenuAjuda);

        btnMenuSobre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        btnMenuSobre.setText("Sobre");
        btnMenuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuSobreActionPerformed(evt);
            }
        });
        jMenu3.add(btnMenuSobre);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMenuExportarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuExportarDadosActionPerformed
        // TODO add your handling code here:
        if(MedidorDeEnergia.gm.listaDadosHora.isEmpty()){
             JOptionPane.showMessageDialog(new FPrincipal().getRootPane(), "Não existe dados a serem salvos!\n", "Aviso", JOptionPane.WARNING_MESSAGE);
             return;
        }
        
        try{
        EscritorArquivoBinario escritor = new EscritorArquivoBinario();
        JFileChooser salvar = new JFileChooser();
        salvar.setCurrentDirectory(new File("."));//Abrir Filechooser no mesmo diretorio do projeto
        
        
      
        int result = salvar.showSaveDialog(this);
        String NomeArq = salvar.getSelectedFile().getName();
      
        if (result == JFileChooser.APPROVE_OPTION){
            
            if (!NomeArq.endsWith(".dat")) {  //Definir a saida do arquivo
                NomeArq += ".dat";  
            }
            escritor.abriArquivoEscrita(NomeArq);
            escritor.escreverObjetoArquivo(MedidorDeEnergia.gm.listaDadosHora);
            escritor.fecharArquivoEscrita();
               
            } 
        }
        
        catch(Exception casoCancelar){
        }
        
    }//GEN-LAST:event_btnMenuExportarDadosActionPerformed

    private void btnMenuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuSairActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnMenuSairActionPerformed

    private void btnMenuImportarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuImportarDadosActionPerformed
        // TODO add your handling code here:
       importarDados();
    }//GEN-LAST:event_btnMenuImportarDadosActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        if(MedidorDeEnergia.gm.listaDadosHora.toString()=="[]"){
            lbStatus.setText("Nenhum dado foi adicionado");
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try{
        String dataI, dataF;
        String horaI;
        String horaF;
       
        String DadosConsultados;
        TratamentoDeErros data = new TratamentoDeErros();
        boolean verifica;
        
        //Dados Filtrados Por Hora
        if(rbHora.isSelected()){
            horaI =  ""+spinnerHoraI.getModel().getValue();
            horaF =  ""+spinnerHoraF.getModel().getValue();
            //Atribui os intervalos passados pelo usuário para as váriaveis dataI e dataF
            dataI =cbDiaI.getModel().getSelectedItem()+"/"+cbMesI.getModel().getSelectedItem()+"/"+spinnerAnoI.getModel().getValue();
            dataF =cbDiaF.getModel().getSelectedItem()+"/"+cbMesF.getModel().getSelectedItem()+"/"+spinnerAnoF.getModel().getValue();
         
            //Verificar Data Inicial
             verifica = data.verificarDataValida(dataI);
            
             if(verifica==false){
                 JOptionPane.showMessageDialog(this, "O intervalo inicial é inválido verifique se a data é válida");
                 return;
             }
            //Verificar Data Final
             verifica = data.verificarDataValida(dataF);
             if(verifica==false){
                   JOptionPane.showMessageDialog(this, "O intervalo final é inválido verifique se a data é válida");
                return;
             }
            
            
            //Checagem e Refatoração de datas
           
                String[]datasRefatoradas = data.verificaIntervaloData(dataI, dataF, horaI, horaF);
                if(datasRefatoradas[2]!= null){
                    
                    horaI = datasRefatoradas[2];
                
                }
                if(datasRefatoradas[3]!= null){
                    horaF = datasRefatoradas[3];
 
                }             
               
                dataI = datasRefatoradas[0];
                dataF = datasRefatoradas[1];
            
       
            //Consulta na ArrayList
            DadosConsultados = "  DATA:\tHORA\tKW\n";   
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.consultarDadosEntreDatasPorHora(dataI, horaI, dataF, horaF));
            
            lbResultadosConsulta.setText(DadosConsultados);

            //Estatisticas
            
            //Máximo
           
            DadosConsultados = "  DATA:\tHORA\tKW\n";   
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.maximosDeKwPorIntervaloDeHora(dataI, horaI, dataF, horaF));
            lbMaximo.setText(DadosConsultados);
           
            //Mínimo
            
            DadosConsultados = "  DATA:\tHORA\tKW\n";   
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.minimosDeKwPorIntervaloDeHora(dataI, horaI, dataF, horaF));
            lbMinimo.setText(DadosConsultados);
            
            //Média
            lbMedia.setText((MedidorDeEnergia.gm.mediaDeKwhPorIntervaloDeHora(dataI, horaI, dataF, horaF)+" Kw"));  
           
           
        }
        //Dados Filtrados por dia
        else if(rbDia.isSelected()){
            
            //Atribui os intervalos passados pelo usuário para as váriaveis dataI e dataF
            dataI = cbDiaI.getModel().getSelectedItem()+"/"+cbMesI.getModel().getSelectedItem()+"/"+spinnerAnoI.getModel().getValue();
            dataF = cbDiaF.getModel().getSelectedItem()+"/"+cbMesF.getModel().getSelectedItem()+"/"+spinnerAnoF.getModel().getValue();
            horaI = "00:00";
            horaF = "23:00";
            
             //Verificar se Data Inicial é válida
             verifica = data.verificarDataValida(dataI);
            
             if(verifica==false){
                 JOptionPane.showMessageDialog(this, "O intervalo inicial é inválido verifique se a data é válida");
                 return;
             }
             //Verificar se Data Final é válida
             verifica = data.verificarDataValida(dataF);
             if(verifica==false){
                   JOptionPane.showMessageDialog(this, "O intervalo final é inválido verifique se a data é válida");
                return;
             }
            
             //Checagem e Refatoração de datas
           
                String[]datasRefatoradas = data.verificaIntervaloData(dataI, dataF, horaI, horaF); 
                dataI = datasRefatoradas[0];
                dataF = datasRefatoradas[1];
                horaI = datasRefatoradas[2];
                horaF = datasRefatoradas[3];
                
            //Consulta os dados 
                
            DadosConsultados = "  DATA:\t KW\n";  
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.consultarDadosEntreDatasPorDia(dataI, dataF));
            lbResultadosConsulta.setText(DadosConsultados);
            
            
           //Estatisticas
            
            //Máximos
            
            DadosConsultados = "  DATA:\t KW\n";   
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.maximosDeKwPorIntervaloDeDia(dataI, dataF));
            lbMaximo.setText(DadosConsultados);
           
            //Mínimos
            
            DadosConsultados = "  DATA:\t KW\n";   
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.minimosDeKwPorIntervaloDeDia(dataI, dataF));
            lbMinimo.setText(DadosConsultados);
           
            //Media
    
            lbMedia.setText((MedidorDeEnergia.gm.mediaDeKwhPorIntervaloDeDia(dataI, dataF)+" Kw"));
            
        }
        //Dados Filtrados Por Mes
        else{
            dataI = cbMesI.getModel().getSelectedItem()+"/"+spinnerAnoI.getModel().getValue();
            dataF = cbMesF.getModel().getSelectedItem()+"/"+spinnerAnoF.getModel().getValue();
            horaI = "00:00";
            horaF = "23:00";
            
            //Checagem e Refatoração de datas
         
            String[]datasRefatoradas = data.verificaIntervaloData(dataI, dataF, horaI, horaF); 
            dataI = datasRefatoradas[0];
            dataF = datasRefatoradas[1];
            horaI = datasRefatoradas[2];
            horaF = datasRefatoradas[3];

            //Consulta os dados
            
            DadosConsultados = "  DATA:\t KW:\n";
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.consultarDadosEntreDatasPorMes(dataI, dataF));
            lbResultadosConsulta.setText(DadosConsultados);
            
            //Estatisticas
            
            //Máximos
            
            DadosConsultados = "  DATA:\t KW:\n";
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.maximosDeKwPorIntervaloDeMes(dataI, dataF));
            lbMaximo.setText(DadosConsultados);
            
            //Mínimos
            
            DadosConsultados = "  DATA:\t KW:\n";
            DadosConsultados+= orgarnizarArrayListEmString(MedidorDeEnergia.gm.minimosDeKwPorIntervaloDeMes(dataI, dataF));
            lbMinimo.setText(DadosConsultados);
            
            //Média
            lbMedia.setText((MedidorDeEnergia.gm.mediaDeKwhPorIntervaloDeMes(dataI, dataF)+" Kw"));
        }
           
                
        }
        catch(NullPointerException erro){//Intervalo nao contido no arraylist
        limparCampos();
           
        }
        catch(IndexOutOfBoundsException erro){//Consultar sem informar os dados
             JOptionPane.showMessageDialog(this, "Por favor informe o arquivo de dados!", "Aviso", JOptionPane.INFORMATION_MESSAGE, null);
             importarDados();
             limparCampos();
        }
     
    }//GEN-LAST:event_jButton3ActionPerformed

    private void rbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMesActionPerformed
        //Define os campos que ficarão visiveis

        cbDiaI.setVisible(false);
        cbMesI.setVisible(rootPaneCheckingEnabled);
        spinnerAnoI.setVisible(rootPaneCheckingEnabled);
        spinnerHoraI.setVisible(false);
        cbDiaF.setVisible(false);
        cbMesF.setVisible(rootPaneCheckingEnabled);
        spinnerAnoF.setVisible(rootPaneCheckingEnabled);
        spinnerHoraF.setVisible(false);
        lbAnoI.setVisible(rootPaneCheckingEnabled);
        lbAnoF.setVisible(rootPaneCheckingEnabled);
        lbDiaI.setVisible(false);
        lbMesI.setVisible(rootPaneCheckingEnabled);
        lbDiaF.setVisible(false);
        lbMesF.setVisible(rootPaneCheckingEnabled);
        lbHoraI.setVisible(false);
        lbHoraF.setVisible(false);
    }//GEN-LAST:event_rbMesActionPerformed

    private void rbDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDiaActionPerformed
          //Define os campos que ficarão visiveis
        
        cbDiaI.setVisible(rootPaneCheckingEnabled);
        cbMesI.setVisible(rootPaneCheckingEnabled);
        spinnerAnoI.setVisible(rootPaneCheckingEnabled);
        spinnerHoraI.setVisible(false);
        cbDiaF.setVisible(rootPaneCheckingEnabled);
        cbMesF.setVisible(rootPaneCheckingEnabled);
        spinnerAnoF.setVisible(rootPaneCheckingEnabled);
        spinnerHoraF.setVisible(false);
        lbAnoI.setVisible(rootPaneCheckingEnabled);
        lbAnoF.setVisible(rootPaneCheckingEnabled);
        lbDiaI.setVisible(rootPaneCheckingEnabled);
        lbMesI.setVisible(rootPaneCheckingEnabled);
        lbDiaF.setVisible(rootPaneCheckingEnabled);
        lbMesF.setVisible(rootPaneCheckingEnabled);
        lbHoraI.setVisible(false);
        lbHoraF.setVisible(false);
    }//GEN-LAST:event_rbDiaActionPerformed

    private void rbHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHoraActionPerformed
        //Define os campos que ficarão visiveis
        
        cbDiaI.setVisible(rootPaneCheckingEnabled);
        cbMesI.setVisible(rootPaneCheckingEnabled);
        spinnerAnoI.setVisible(rootPaneCheckingEnabled);
        spinnerHoraI.setVisible(rootPaneCheckingEnabled);
        cbDiaF.setVisible(rootPaneCheckingEnabled);
        cbMesF.setVisible(rootPaneCheckingEnabled);
        spinnerAnoF.setVisible(rootPaneCheckingEnabled);
        spinnerHoraF.setVisible(rootPaneCheckingEnabled);
        lbAnoI.setVisible(rootPaneCheckingEnabled);
        lbAnoF.setVisible(rootPaneCheckingEnabled);
        lbDiaI.setVisible(rootPaneCheckingEnabled);
        lbMesI.setVisible(rootPaneCheckingEnabled);
        lbDiaF.setVisible(rootPaneCheckingEnabled);
        lbMesF.setVisible(rootPaneCheckingEnabled);
        lbHoraI.setVisible(rootPaneCheckingEnabled);
        lbHoraF.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_rbHoraActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        importarDados();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnMenuAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuAjudaActionPerformed
        // TODO add your handling code here:
          new FLeiame().setVisible(true);
    }//GEN-LAST:event_btnMenuAjudaActionPerformed

    private void btnMenuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuSobreActionPerformed
        // TODO add your handling code here:
          new FSobre().setVisible(true);
    }//GEN-LAST:event_btnMenuSobreActionPerformed

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        // TODO add your handling code here:
        new FLeiame().setVisible(true);
    }//GEN-LAST:event_jLabel14MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FPrincipal().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelDados;
    private javax.swing.JPanel PanelEstatisticas;
    private javax.swing.JPanel PanelPaginaInicial;
    private javax.swing.JMenuItem btnMenuAjuda;
    private javax.swing.JMenu btnMenuArquivo;
    private javax.swing.JMenuItem btnMenuExportarDados;
    private javax.swing.JMenuItem btnMenuImportarDados;
    private javax.swing.JMenuItem btnMenuSair;
    private javax.swing.JMenuItem btnMenuSobre;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbDiaF;
    private javax.swing.JComboBox cbDiaI;
    private javax.swing.JComboBox cbMesF;
    private javax.swing.JComboBox cbMesI;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lbAnoF;
    private javax.swing.JLabel lbAnoI;
    private javax.swing.JLabel lbDiaF;
    private javax.swing.JLabel lbDiaI;
    private javax.swing.JLabel lbHoraF;
    private javax.swing.JLabel lbHoraI;
    private javax.swing.JTextPane lbMaximo;
    private javax.swing.JTextPane lbMedia;
    private javax.swing.JLabel lbMesF;
    private javax.swing.JLabel lbMesI;
    private javax.swing.JTextPane lbMinimo;
    private javax.swing.JTextArea lbResultadosConsulta;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JRadioButton rbDia;
    private javax.swing.JRadioButton rbHora;
    private javax.swing.JRadioButton rbMes;
    private javax.swing.JSpinner spinnerAnoF;
    private javax.swing.JSpinner spinnerAnoI;
    private javax.swing.JSpinner spinnerHoraF;
    private javax.swing.JSpinner spinnerHoraI;
    // End of variables declaration//GEN-END:variables
    /**
     * Define o icóne do formulário
     */
//    private void setIcon() { 
//        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("\\../img/icone32x32.png")));
//    }
    
    public String orgarnizarArrayListEmString(ArrayList<Medidor> array){
        String Dados = "";
        for(int i = 0; i<array.size();i++){
            Dados+= array.get(i);
        }
        return Dados;
    }
 
    /**
     * Limpa os campos do formulário
     */
     public void limparCampos(){
           lbResultadosConsulta.setText("");
           lbMaximo.setText("");
           lbMinimo.setText("");
           lbMedia.setText("");
    }
     /**
      * Inicializa as ArrayLists "ListaDadosDia" e "ListaDadosMes"
      */
    private void inicializarArrayListAuxiliares(){
          MedidorDeEnergia.gm.converterListaHoraParaDia();
          MedidorDeEnergia.gm.converterListaDiaParaMes();
    }
    
    /**
     * Este método importa lista dados do tipo medidor
     * que estão no formato CSV, TXT ou DAT
     */
    private void importarDados(){
       
        
        JFileChooser abrir = new JFileChooser();
        String[] formato = {"CSV", "txt", "dat"};
        abrir.setFileFilter(new Filtro(formato));
       
        abrir.setCurrentDirectory(new File("."));//abrir na pasta no projeto
       
        int result = abrir.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION){
            try {
                //Se o arquivo de dados for do tipo CSV ou TXT
                if((abrir.getSelectedFile().getName().endsWith(".CSV"))|| (abrir.getSelectedFile().getName().endsWith(".txt"))){
                 
                    MedidorDeEnergia.gm.importarCSV(abrir.getSelectedFile().getName());
                    
                    JOptionPane.showMessageDialog(this, "O Arquivo  \""+abrir.getSelectedFile().getName()+"\"  foi importado com sucesso", "Informação", JOptionPane.INFORMATION_MESSAGE, null);
                     //Atualizar Status
                    lbStatus.setText("Dados Importados!");  
                    inicializarArrayListAuxiliares();
                }
                //Se o arquivo de dados for do tipo DAT
                else{
                    LeitorArquivoBinario leitor = new LeitorArquivoBinario();
                    leitor.abriArquivoLeitura(abrir.getSelectedFile().getName());
                    MedidorDeEnergia.gm.listaDadosHora = leitor.obterObjetoArquivo();
                    leitor.fecharArquivoLeitura();
                    //Confirmar Importaçao
                    JOptionPane.showMessageDialog(this, "O Arquivo  \""+abrir.getSelectedFile().getName()+"\"  foi importado com sucesso", "Informação", JOptionPane.INFORMATION_MESSAGE, null);
                     //Atualizar Status
                    lbStatus.setText("Dados Importados!");  
                    inicializarArrayListAuxiliares();
                   
                }
               
             
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "O Arquivo  \""+abrir.getSelectedFile().getName()+"\"  não foi encontrado", "Erro", JOptionPane.WARNING_MESSAGE, null);
                limparCampos();
            }
            catch(ArrayIndexOutOfBoundsException erro){
            JOptionPane.showMessageDialog(new FPrincipal().getRootPane(), "O Arquivo \""+abrir.getSelectedFile().getName()+"\" não é um arquivo válido", "Erro", JOptionPane.WARNING_MESSAGE, null);
            limparCampos();
            }
        }
        
     
    }
}
