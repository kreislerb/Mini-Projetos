CCS PCH C Compiler, Version 5.007, 61971               15-dez-17 01:00

               Filename:   C:\Users\kreislerb\OneDrive\UFU\6° PERIODO\MICRO\Projeto\Codigo\main.lst

               ROM used:   9856 bytes (30%)
                           Largest free fragment is 22912
               RAM used:   77 (4%) at main() level
                           550 (27%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   2390
.................... /* 
.................... %Titulo HARP MUSIC LASER 
.................... %Autor: KREISLER BRENNER MENDES 
.................... %Finalizado em: 07/12/2017 
....................  
.................... %Descrição: 
....................    O HARP MUSIC LASER é uma interface de usuário musical eletrônico e exibição de iluminação a laser.  
....................    Projeta vários feixes de laser, e um músico toca bloqueando-os para produzir sons, que relembram uma harpa.   
.................... %Funcionalidades: 
....................    
....................    > MENU ROTATIVO COM BOTOES CIMA, BAIXO, ENTER E CANCEL 
....................    > CONTROLE DE MENUS COM INDEXADORES DE NÍVEL (EVITA PROBLEMAS COM PILHA) 
....................    > GERENCIA DE DADOS COM INFORMAÇÕES DAS MÚSICAS 
....................    > INDICAR O USUARIO A NOTA A SER TOCADA 
....................    > VERIFICAÇÃO DE ACERTOS DAS NOTAS DA MUSICA JOGADA. 
....................    > CALCULAR PONTUACAO FINAL 
....................    > SALVAR RECORDS NA MEMORIA EEPROM 
....................  
.................... %Limitações: 
....................  
....................    O hardware so executa notas maiores e polifonicas. 
....................   
.................... %Entradas 
....................    PORTA B -> CADA BIT REPRESENTA UM LDR DIGITALIZADO E CADA LDR REPRESENTA UMA NOTA MUSICAL 
....................    PINO E2 -> BOTÃO UP 
....................    PINO D0 -> BOTÃO DOWN 
....................    PINO C6 -> BOTÃO ENTER 
....................    PINO C7 -> BOTÃO CLOSE 
....................    Total de pinos como entrada: 12; 
.................... %Saidas 
....................    PINOS D1 - D7 -> LCD 
....................    8 LEDS 
....................    Total de pinos como entrada: 15; 
....................  
....................     
.................... */ 
.................... #include <main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 28,0C
0016:  DATA 01,06
0018:  CLRF   FF7
001A:  ADDLW  28
001C:  MOVWF  FF6
001E:  MOVLW  00
0020:  ADDWFC FF7,F
0022:  TBLRD*+
0024:  MOVF   FF5,W
0026:  RETURN 0
0028:  DATA 44,4F
002A:  DATA 20,52
002C:  DATA 45,20
002E:  DATA 4D,49
0030:  DATA 20,46
0032:  DATA 41,00
0034:  CLRF   FF7
0036:  ADDLW  44
0038:  MOVWF  FF6
003A:  MOVLW  00
003C:  ADDWFC FF7,F
003E:  TBLRD*+
0040:  MOVF   FF5,W
0042:  RETURN 0
0044:  DATA 41,53
0046:  DATA 41,20
0048:  DATA 42,52
004A:  DATA 41,4E
004C:  DATA 43,41
004E:  DATA 00,00
0050:  CLRF   FF7
0052:  ADDLW  60
0054:  MOVWF  FF6
0056:  MOVLW  00
0058:  ADDWFC FF7,F
005A:  TBLRD*+
005C:  MOVF   FF5,W
005E:  RETURN 0
0060:  DATA 49,4E
0062:  DATA 44,49
0064:  DATA 41,4E
0066:  DATA 41,20
0068:  DATA 4A,4F
006A:  DATA 4E,45
006C:  DATA 53,00
006E:  CLRF   FF7
0070:  ADDLW  7E
0072:  MOVWF  FF6
0074:  MOVLW  00
0076:  ADDWFC FF7,F
0078:  TBLRD*+
007A:  MOVF   FF5,W
007C:  RETURN 0
007E:  DATA 53,59
0080:  DATA 4D,50
0082:  DATA 48,4F
0084:  DATA 4E,59
0086:  DATA 20,4E
0088:  DATA 6F,2E
008A:  DATA 20,39
008C:  DATA 00,00
008E:  CLRF   FF7
0090:  ADDLW  9E
0092:  MOVWF  FF6
0094:  MOVLW  00
0096:  ADDWFC FF7,F
0098:  TBLRD*+
009A:  MOVF   FF5,W
009C:  RETURN 0
009E:  DATA 45,52
00A0:  DATA 52,4F
00A2:  DATA 55,00
00A4:  CLRF   FF7
00A6:  ADDLW  B4
00A8:  MOVWF  FF6
00AA:  MOVLW  00
00AC:  ADDWFC FF7,F
00AE:  TBLRD*+
00B0:  MOVF   FF5,W
00B2:  RETURN 0
00B4:  DATA 50,45
00B6:  DATA 53,53
00B8:  DATA 49,4D
00BA:  DATA 4F,00
00BC:  CLRF   FF7
00BE:  ADDLW  CC
00C0:  MOVWF  FF6
00C2:  MOVLW  00
00C4:  ADDWFC FF7,F
00C6:  TBLRD*+
00C8:  MOVF   FF5,W
00CA:  RETURN 0
00CC:  DATA 52,55
00CE:  DATA 49,4D
00D0:  DATA 00,00
00D2:  CLRF   FF7
00D4:  ADDLW  E2
00D6:  MOVWF  FF6
00D8:  MOVLW  00
00DA:  ADDWFC FF7,F
00DC:  TBLRD*+
00DE:  MOVF   FF5,W
00E0:  RETURN 0
00E2:  DATA 52,45
00E4:  DATA 47,55
00E6:  DATA 4C,41
00E8:  DATA 52,00
00EA:  CLRF   FF7
00EC:  ADDLW  FA
00EE:  MOVWF  FF6
00F0:  MOVLW  00
00F2:  ADDWFC FF7,F
00F4:  TBLRD*+
00F6:  MOVF   FF5,W
00F8:  RETURN 0
00FA:  DATA 42,4F
00FC:  DATA 4D,00
00FE:  CLRF   FF7
0100:  ADDLW  0E
0102:  MOVWF  FF6
0104:  MOVLW  01
0106:  ADDWFC FF7,F
0108:  TBLRD*+
010A:  MOVF   FF5,W
010C:  RETURN 0
010E:  DATA 50,45
0110:  DATA 52,46
0112:  DATA 45,49
0114:  DATA 54,4F
0116:  DATA 21,21
0118:  DATA 00,00
011A:  DATA 20,20
011C:  DATA 43,41
011E:  DATA 52,52
0120:  DATA 45,47
0122:  DATA 41,4E
0124:  DATA 44,4F
0126:  DATA 2E,2E
0128:  DATA 00,00
012A:  DATA 20,20
012C:  DATA 20,33
012E:  DATA 2E,2E
0130:  DATA 00,00
0132:  DATA 32,2E
0134:  DATA 2E,00
0136:  DATA 31,2E
0138:  DATA 2E,00
013A:  DATA 20,20
013C:  DATA 20,20
013E:  DATA 20,20
0140:  DATA 56,41
0142:  DATA 49,21
0144:  DATA 21,00
0146:  DATA 4E,6F
0148:  DATA 74,61
014A:  DATA 50,72
014C:  DATA 65,73
014E:  DATA 73,3A
0150:  DATA 20,25
0152:  DATA 75,20
0154:  DATA 20,20
0156:  DATA 20,00
0158:  DATA 0C,41
015A:  DATA 63,65
015C:  DATA 72,74
015E:  DATA 6F,73
0160:  DATA 3A,20
0162:  DATA 25,6C
0164:  DATA 75,2F
0166:  DATA 25,75
0168:  DATA 00,00
016A:  DATA 50,65
016C:  DATA 72,63
016E:  DATA 2E,54
0170:  DATA 6F,74
0172:  DATA 61,6C
0174:  DATA 3A,20
0176:  DATA 20,25
0178:  DATA 75,25
017A:  DATA 25,00
017C:  DATA 0C,52
017E:  DATA 45,43
0180:  DATA 4F,52
0182:  DATA 44,20
0184:  DATA 41,54
0186:  DATA 49,4E
0188:  DATA 47,49
018A:  DATA 44,4F
018C:  DATA 21,0A
018E:  DATA 25,75
0190:  DATA 20,43
0192:  DATA 4F,4C
0194:  DATA 4F,43
0196:  DATA 41,44
0198:  DATA 4F,00
019A:  DATA 20,20
019C:  DATA 20,20
019E:  DATA 4D,55
01A0:  DATA 53,49
01A2:  DATA 43,41
01A4:  DATA 53,3A
01A6:  DATA 00,00
01A8:  DATA 20,20
01AA:  DATA 20,20
01AC:  DATA 20,20
01AE:  DATA 20,20
01B0:  DATA 20,20
01B2:  DATA 20,20
01B4:  DATA 20,20
01B6:  DATA 20,20
01B8:  DATA 00,00
01BA:  DATA 20,20
01BC:  DATA 20,20
01BE:  DATA 20,20
01C0:  DATA 20,20
01C2:  DATA 20,20
01C4:  DATA 20,20
01C6:  DATA 20,20
01C8:  DATA 20,20
01CA:  DATA 00,00
01CC:  DATA 20,20
01CE:  DATA 20,20
01D0:  DATA 20,20
01D2:  DATA 20,20
01D4:  DATA 20,20
01D6:  DATA 20,20
01D8:  DATA 20,20
01DA:  DATA 20,20
01DC:  DATA 00,00
01DE:  DATA 20,20
01E0:  DATA 20,20
01E2:  DATA 20,20
01E4:  DATA 20,20
01E6:  DATA 20,20
01E8:  DATA 20,20
01EA:  DATA 20,20
01EC:  DATA 20,20
01EE:  DATA 00,00
01F0:  DATA 25,75
01F2:  DATA 2E,25
01F4:  DATA 73,20
01F6:  DATA 20,20
01F8:  DATA 20,20
01FA:  DATA 20,20
01FC:  DATA 20,20
01FE:  DATA 20,20
0200:  DATA 00,00
0202:  DATA 50,6F
0204:  DATA 6E,74
0206:  DATA 75,61
0208:  DATA 63,61
020A:  DATA 6F,3A
020C:  DATA 20,25
020E:  DATA 75,25
0210:  DATA 25,00
0212:  DATA 20,4D
0214:  DATA 45,4E
0216:  DATA 55,20
0218:  DATA 50,52
021A:  DATA 49,4E
021C:  DATA 43,49
021E:  DATA 50,41
0220:  DATA 4C,20
0222:  DATA 00,00
0224:  DATA 20,20
0226:  DATA 20,20
0228:  DATA 20,20
022A:  DATA 20,20
022C:  DATA 20,20
022E:  DATA 20,20
0230:  DATA 20,20
0232:  DATA 20,20
0234:  DATA 00,00
0236:  DATA 20,20
0238:  DATA 20,20
023A:  DATA 20,20
023C:  DATA 20,20
023E:  DATA 20,20
0240:  DATA 20,20
0242:  DATA 20,20
0244:  DATA 20,20
0246:  DATA 00,00
0248:  DATA 48,41
024A:  DATA 52,50
024C:  DATA 20,4C
024E:  DATA 41,53
0250:  DATA 45,52
0252:  DATA 20,4D
0254:  DATA 55,53
0256:  DATA 49,43
0258:  DATA 00,00
025A:  DATA 2B,2D
025C:  DATA 2B,50
025E:  DATA 4C,41
0260:  DATA 59,20
0262:  DATA 47,41
0264:  DATA 4D,45
0266:  DATA 21,2B
0268:  DATA 2D,2B
026A:  DATA 00,00
*
04F2:  TBLRD*+
04F4:  MOVF   FF5,F
04F6:  BZ    0510
04F8:  MOVFF  FF6,5F
04FC:  MOVFF  FF7,60
0500:  MOVFF  FF5,20E
0504:  RCALL  0486
0506:  MOVFF  5F,FF6
050A:  MOVFF  60,FF7
050E:  BRA    04F2
0510:  RETURN 0
*
0588:  MOVLB  2
058A:  MOVF   x0F,W
058C:  CLRF   01
058E:  SUBWF  x0E,W
0590:  BC    0598
0592:  MOVFF  20E,00
0596:  BRA    05B0
0598:  CLRF   00
059A:  MOVLW  08
059C:  MOVWF  x10
059E:  RLCF   x0E,F
05A0:  RLCF   00,F
05A2:  MOVF   x0F,W
05A4:  SUBWF  00,W
05A6:  BTFSC  FD8.0
05A8:  MOVWF  00
05AA:  RLCF   01,F
05AC:  DECFSZ x10,F
05AE:  BRA    059E
05B0:  MOVLB  0
05B2:  RETURN 0
05B4:  MOVF   01,W
05B6:  MOVFF  20C,20E
05BA:  MOVLW  64
05BC:  MOVLB  2
05BE:  MOVWF  x0F
05C0:  MOVLB  0
05C2:  RCALL  0588
05C4:  MOVFF  00,20C
05C8:  MOVF   01,W
05CA:  MOVLW  30
05CC:  BNZ   05DE
05CE:  MOVLB  2
05D0:  BTFSS  x0D.1
05D2:  BRA    05F2
05D4:  BTFSC  x0D.3
05D6:  BRA    05F2
05D8:  BTFSC  x0D.4
05DA:  MOVLW  20
05DC:  BRA    05E6
05DE:  MOVLB  2
05E0:  BCF    x0D.3
05E2:  BCF    x0D.4
05E4:  BSF    x0D.0
05E6:  ADDWF  01,F
05E8:  MOVFF  01,20E
05EC:  MOVLB  0
05EE:  RCALL  0486
05F0:  MOVLB  2
05F2:  MOVFF  20C,20E
05F6:  MOVLW  0A
05F8:  MOVWF  x0F
05FA:  MOVLB  0
05FC:  RCALL  0588
05FE:  MOVFF  00,20C
0602:  MOVF   01,W
0604:  MOVLW  30
0606:  BNZ   0618
0608:  MOVLB  2
060A:  BTFSC  x0D.3
060C:  BRA    0622
060E:  BTFSS  x0D.0
0610:  BRA    0622
0612:  BTFSC  x0D.4
0614:  MOVLW  20
0616:  MOVLB  0
0618:  ADDWF  01,F
061A:  MOVFF  01,20E
061E:  RCALL  0486
0620:  MOVLB  2
0622:  MOVLW  30
0624:  ADDWF  x0C,F
0626:  MOVFF  20C,20E
062A:  MOVLB  0
062C:  RCALL  0486
062E:  RETURN 0
0630:  MOVF   FEF,F
0632:  BZ    0652
0634:  MOVFF  FEA,20D
0638:  MOVFF  FE9,20C
063C:  MOVFF  FEF,20E
0640:  RCALL  0486
0642:  MOVFF  20D,FEA
0646:  MOVFF  20C,FE9
064A:  INCF   FE9,F
064C:  BTFSC  FD8.2
064E:  INCF   FEA,F
0650:  BRA    0630
0652:  RETURN 0
*
0AC6:  CLRF   01
0AC8:  CLRF   02
0ACA:  CLRF   00
0ACC:  CLRF   03
0ACE:  MOVLB  2
0AD0:  MOVF   x04,W
0AD2:  BNZ   0AD8
0AD4:  MOVF   x03,W
0AD6:  BZ    0B08
0AD8:  MOVLW  10
0ADA:  MOVWF  x05
0ADC:  BCF    FD8.0
0ADE:  RLCF   x01,F
0AE0:  RLCF   x02,F
0AE2:  RLCF   00,F
0AE4:  RLCF   03,F
0AE6:  MOVF   x04,W
0AE8:  SUBWF  03,W
0AEA:  BNZ   0AF0
0AEC:  MOVF   x03,W
0AEE:  SUBWF  00,W
0AF0:  BNC   0B00
0AF2:  MOVF   x03,W
0AF4:  SUBWF  00,F
0AF6:  BTFSS  FD8.0
0AF8:  DECF   03,F
0AFA:  MOVF   x04,W
0AFC:  SUBWF  03,F
0AFE:  BSF    FD8.0
0B00:  RLCF   01,F
0B02:  RLCF   02,F
0B04:  DECFSZ x05,F
0B06:  BRA    0ADC
0B08:  MOVLB  0
0B0A:  RETURN 0
*
0C54:  ADDWF  FE8,W
0C56:  CLRF   FF7
0C58:  RLCF   FF7,F
0C5A:  ADDLW  6F
0C5C:  MOVWF  FF6
0C5E:  MOVLW  0C
0C60:  ADDWFC FF7,F
0C62:  TBLRD*-
0C64:  MOVF   FF5,W
0C66:  MOVWF  FFA
0C68:  TBLRD*
0C6A:  MOVF   FF5,W
0C6C:  MOVWF  FF9
0C6E:  DATA 1E,0B
0C70:  DATA 46,0B
0C72:  DATA 6E,0B
0C74:  DATA 96,0B
0C76:  DATA BE,0B
0C78:  DATA E6,0B
0C7A:  TBLRD*+
0C7C:  MOVFF  FF6,202
0C80:  MOVFF  FF7,203
0C84:  MOVFF  FF5,20E
0C88:  CALL   0486
0C8C:  MOVFF  202,FF6
0C90:  MOVFF  203,FF7
0C94:  MOVLB  2
0C96:  DECFSZ x01,F
0C98:  BRA    0C9C
0C9A:  BRA    0CA0
0C9C:  MOVLB  0
0C9E:  BRA    0C7A
0CA0:  MOVLB  0
0CA2:  RETURN 0
0CA4:  MOVLW  8E
0CA6:  MOVWF  00
0CA8:  MOVFF  217,01
0CAC:  MOVFF  216,02
0CB0:  CLRF   03
0CB2:  MOVF   01,F
0CB4:  BNZ   0CC8
0CB6:  MOVFF  02,01
0CBA:  CLRF   02
0CBC:  MOVLW  08
0CBE:  SUBWF  00,F
0CC0:  MOVF   01,F
0CC2:  BNZ   0CC8
0CC4:  CLRF   00
0CC6:  BRA    0CD8
0CC8:  BCF    FD8.0
0CCA:  BTFSC  01.7
0CCC:  BRA    0CD6
0CCE:  RLCF   02,F
0CD0:  RLCF   01,F
0CD2:  DECF   00,F
0CD4:  BRA    0CC8
0CD6:  BCF    01.7
0CD8:  RETURN 0
0CDA:  MOVFF  213,21A
0CDE:  MOVLB  2
0CE0:  MOVF   x17,W
0CE2:  XORWF  x1A,F
0CE4:  BTFSS  x1A.7
0CE6:  BRA    0CF2
0CE8:  BCF    FD8.2
0CEA:  BCF    FD8.0
0CEC:  BTFSC  x13.7
0CEE:  BSF    FD8.0
0CF0:  BRA    0D50
0CF2:  MOVFF  213,21A
0CF6:  MOVFF  216,21B
0CFA:  MOVF   x12,W
0CFC:  SUBWF  x1B,F
0CFE:  BZ    0D0C
0D00:  BTFSS  x1A.7
0D02:  BRA    0D50
0D04:  MOVF   FD8,W
0D06:  XORLW  01
0D08:  MOVWF  FD8
0D0A:  BRA    0D50
0D0C:  MOVFF  217,21B
0D10:  MOVF   x13,W
0D12:  SUBWF  x1B,F
0D14:  BZ    0D22
0D16:  BTFSS  x1A.7
0D18:  BRA    0D50
0D1A:  MOVF   FD8,W
0D1C:  XORLW  01
0D1E:  MOVWF  FD8
0D20:  BRA    0D50
0D22:  MOVFF  218,21B
0D26:  MOVF   x14,W
0D28:  SUBWF  x1B,F
0D2A:  BZ    0D38
0D2C:  BTFSS  x1A.7
0D2E:  BRA    0D50
0D30:  MOVF   FD8,W
0D32:  XORLW  01
0D34:  MOVWF  FD8
0D36:  BRA    0D50
0D38:  MOVFF  219,21B
0D3C:  MOVF   x15,W
0D3E:  SUBWF  x1B,F
0D40:  BZ    0D4E
0D42:  BTFSS  x1A.7
0D44:  BRA    0D50
0D46:  MOVF   FD8,W
0D48:  XORLW  01
0D4A:  MOVWF  FD8
0D4C:  BRA    0D50
0D4E:  BCF    FD8.0
0D50:  MOVLB  0
0D52:  RETURN 0
0D54:  MOVLW  8E
0D56:  MOVWF  00
0D58:  MOVLB  2
0D5A:  MOVF   x12,W
0D5C:  SUBWF  00,F
0D5E:  MOVFF  213,02
0D62:  MOVFF  214,01
0D66:  BSF    02.7
0D68:  MOVF   00,F
0D6A:  BZ    0D7E
0D6C:  BCF    FD8.0
0D6E:  MOVF   02,F
0D70:  BNZ   0D76
0D72:  MOVF   01,F
0D74:  BZ    0D7E
0D76:  RRCF   02,F
0D78:  RRCF   01,F
0D7A:  DECFSZ 00,F
0D7C:  BRA    0D6C
0D7E:  BTFSS  x13.7
0D80:  BRA    0D8C
0D82:  COMF   01,F
0D84:  COMF   02,F
0D86:  INCF   01,F
0D88:  BTFSC  FD8.2
0D8A:  INCF   02,F
0D8C:  MOVLB  0
0D8E:  RETURN 0
0D90:  MOVLB  2
0D92:  MOVF   x12,W
0D94:  BTFSC  FD8.2
0D96:  BRA    0E7A
0D98:  MOVWF  00
0D9A:  MOVF   x16,W
0D9C:  BTFSC  FD8.2
0D9E:  BRA    0E7A
0DA0:  ADDWF  00,F
0DA2:  BNC   0DAC
0DA4:  MOVLW  81
0DA6:  ADDWF  00,F
0DA8:  BC    0E7A
0DAA:  BRA    0DB4
0DAC:  MOVLW  7F
0DAE:  SUBWF  00,F
0DB0:  BNC   0E7A
0DB2:  BZ    0E7A
0DB4:  MOVFF  213,21A
0DB8:  MOVF   x17,W
0DBA:  XORWF  x1A,F
0DBC:  BSF    x13.7
0DBE:  BSF    x17.7
0DC0:  MOVF   x15,W
0DC2:  MULWF  x19
0DC4:  MOVFF  FF4,21C
0DC8:  MOVF   x14,W
0DCA:  MULWF  x18
0DCC:  MOVFF  FF4,03
0DD0:  MOVFF  FF3,21B
0DD4:  MULWF  x19
0DD6:  MOVF   FF3,W
0DD8:  ADDWF  x1C,F
0DDA:  MOVF   FF4,W
0DDC:  ADDWFC x1B,F
0DDE:  MOVLW  00
0DE0:  ADDWFC 03,F
0DE2:  MOVF   x15,W
0DE4:  MULWF  x18
0DE6:  MOVF   FF3,W
0DE8:  ADDWF  x1C,F
0DEA:  MOVF   FF4,W
0DEC:  ADDWFC x1B,F
0DEE:  MOVLW  00
0DF0:  CLRF   02
0DF2:  ADDWFC 03,F
0DF4:  ADDWFC 02,F
0DF6:  MOVF   x13,W
0DF8:  MULWF  x19
0DFA:  MOVF   FF3,W
0DFC:  ADDWF  x1B,F
0DFE:  MOVF   FF4,W
0E00:  ADDWFC 03,F
0E02:  MOVLW  00
0E04:  ADDWFC 02,F
0E06:  MOVF   x13,W
0E08:  MULWF  x18
0E0A:  MOVF   FF3,W
0E0C:  ADDWF  03,F
0E0E:  MOVF   FF4,W
0E10:  ADDWFC 02,F
0E12:  MOVLW  00
0E14:  CLRF   01
0E16:  ADDWFC 01,F
0E18:  MOVF   x15,W
0E1A:  MULWF  x17
0E1C:  MOVF   FF3,W
0E1E:  ADDWF  x1B,F
0E20:  MOVF   FF4,W
0E22:  ADDWFC 03,F
0E24:  MOVLW  00
0E26:  ADDWFC 02,F
0E28:  ADDWFC 01,F
0E2A:  MOVF   x14,W
0E2C:  MULWF  x17
0E2E:  MOVF   FF3,W
0E30:  ADDWF  03,F
0E32:  MOVF   FF4,W
0E34:  ADDWFC 02,F
0E36:  MOVLW  00
0E38:  ADDWFC 01,F
0E3A:  MOVF   x13,W
0E3C:  MULWF  x17
0E3E:  MOVF   FF3,W
0E40:  ADDWF  02,F
0E42:  MOVF   FF4,W
0E44:  ADDWFC 01,F
0E46:  INCF   00,F
0E48:  BTFSC  01.7
0E4A:  BRA    0E56
0E4C:  RLCF   x1B,F
0E4E:  RLCF   03,F
0E50:  RLCF   02,F
0E52:  RLCF   01,F
0E54:  DECF   00,F
0E56:  MOVLW  00
0E58:  BTFSS  x1B.7
0E5A:  BRA    0E70
0E5C:  INCF   03,F
0E5E:  ADDWFC 02,F
0E60:  ADDWFC 01,F
0E62:  MOVF   01,W
0E64:  BNZ   0E70
0E66:  MOVF   02,W
0E68:  BNZ   0E70
0E6A:  MOVF   03,W
0E6C:  BNZ   0E70
0E6E:  INCF   00,F
0E70:  BTFSC  x1A.7
0E72:  BSF    01.7
0E74:  BTFSS  x1A.7
0E76:  BCF    01.7
0E78:  BRA    0E82
0E7A:  CLRF   00
0E7C:  CLRF   01
0E7E:  CLRF   02
0E80:  CLRF   03
0E82:  MOVLB  0
0E84:  RETURN 0
0E86:  MOVLW  80
0E88:  BTFSS  FD8.1
0E8A:  BRA    0E90
0E8C:  MOVLB  2
0E8E:  XORWF  x1B,F
0E90:  MOVLB  2
0E92:  CLRF   x20
0E94:  CLRF   x21
0E96:  MOVFF  217,21F
0E9A:  MOVF   x1B,W
0E9C:  XORWF  x1F,F
0E9E:  MOVF   x16,W
0EA0:  BTFSC  FD8.2
0EA2:  BRA    1062
0EA4:  MOVWF  x1E
0EA6:  MOVWF  00
0EA8:  MOVF   x1A,W
0EAA:  BTFSC  FD8.2
0EAC:  BRA    1074
0EAE:  SUBWF  x1E,F
0EB0:  BTFSC  FD8.2
0EB2:  BRA    0FBA
0EB4:  BNC   0F32
0EB6:  MOVFF  21B,224
0EBA:  BSF    x24.7
0EBC:  MOVFF  21C,223
0EC0:  MOVFF  21D,222
0EC4:  CLRF   x21
0EC6:  BCF    FD8.0
0EC8:  RRCF   x24,F
0ECA:  RRCF   x23,F
0ECC:  RRCF   x22,F
0ECE:  RRCF   x21,F
0ED0:  DECFSZ x1E,F
0ED2:  BRA    0EC4
0ED4:  BTFSS  x1F.7
0ED6:  BRA    0EDE
0ED8:  BSF    x20.0
0EDA:  BRA    109C
0EDC:  BCF    x20.0
0EDE:  BCF    x1E.0
0EE0:  BSF    x20.4
0EE2:  MOVLW  02
0EE4:  MOVWF  FEA
0EE6:  MOVLW  19
0EE8:  MOVWF  FE9
0EEA:  BRA    10C2
0EEC:  BCF    x20.4
0EEE:  BTFSC  x1F.7
0EF0:  BRA    0F06
0EF2:  BTFSS  x1E.0
0EF4:  BRA    0F1C
0EF6:  RRCF   x24,F
0EF8:  RRCF   x23,F
0EFA:  RRCF   x22,F
0EFC:  RRCF   x21,F
0EFE:  INCF   00,F
0F00:  BTFSC  FD8.2
0F02:  BRA    1092
0F04:  BRA    0F1C
0F06:  BTFSC  x24.7
0F08:  BRA    0F22
0F0A:  BCF    FD8.0
0F0C:  RLCF   x21,F
0F0E:  RLCF   x22,F
0F10:  RLCF   x23,F
0F12:  RLCF   x24,F
0F14:  DECF   00,F
0F16:  BTFSC  FD8.2
0F18:  BRA    1092
0F1A:  BRA    0F06
0F1C:  BSF    x20.6
0F1E:  BRA    0FFA
0F20:  BCF    x20.6
0F22:  MOVFF  217,21F
0F26:  BTFSS  x17.7
0F28:  BRA    0F2E
0F2A:  BSF    x24.7
0F2C:  BRA    1084
0F2E:  BCF    x24.7
0F30:  BRA    1084
0F32:  MOVFF  21A,21E
0F36:  MOVFF  21A,00
0F3A:  MOVF   x16,W
0F3C:  SUBWF  x1E,F
0F3E:  MOVFF  217,224
0F42:  BSF    x24.7
0F44:  MOVFF  218,223
0F48:  MOVFF  219,222
0F4C:  CLRF   x21
0F4E:  BCF    FD8.0
0F50:  RRCF   x24,F
0F52:  RRCF   x23,F
0F54:  RRCF   x22,F
0F56:  RRCF   x21,F
0F58:  DECFSZ x1E,F
0F5A:  BRA    0F4C
0F5C:  BTFSS  x1F.7
0F5E:  BRA    0F66
0F60:  BSF    x20.1
0F62:  BRA    109C
0F64:  BCF    x20.1
0F66:  BCF    x1E.0
0F68:  BSF    x20.5
0F6A:  MOVLW  02
0F6C:  MOVWF  FEA
0F6E:  MOVLW  1D
0F70:  MOVWF  FE9
0F72:  BRA    10C2
0F74:  BCF    x20.5
0F76:  BTFSC  x1F.7
0F78:  BRA    0F8E
0F7A:  BTFSS  x1E.0
0F7C:  BRA    0FA4
0F7E:  RRCF   x24,F
0F80:  RRCF   x23,F
0F82:  RRCF   x22,F
0F84:  RRCF   x21,F
0F86:  INCF   00,F
0F88:  BTFSC  FD8.2
0F8A:  BRA    1092
0F8C:  BRA    0FA4
0F8E:  BTFSC  x24.7
0F90:  BRA    0FAA
0F92:  BCF    FD8.0
0F94:  RLCF   x21,F
0F96:  RLCF   x22,F
0F98:  RLCF   x23,F
0F9A:  RLCF   x24,F
0F9C:  DECF   00,F
0F9E:  BTFSC  FD8.2
0FA0:  BRA    1092
0FA2:  BRA    0F8E
0FA4:  BSF    x20.7
0FA6:  BRA    0FFA
0FA8:  BCF    x20.7
0FAA:  MOVFF  21B,21F
0FAE:  BTFSS  x1B.7
0FB0:  BRA    0FB6
0FB2:  BSF    x24.7
0FB4:  BRA    1084
0FB6:  BCF    x24.7
0FB8:  BRA    1084
0FBA:  MOVFF  21B,224
0FBE:  BSF    x24.7
0FC0:  MOVFF  21C,223
0FC4:  MOVFF  21D,222
0FC8:  BTFSS  x1F.7
0FCA:  BRA    0FD4
0FCC:  BCF    x24.7
0FCE:  BSF    x20.2
0FD0:  BRA    109C
0FD2:  BCF    x20.2
0FD4:  CLRF   x21
0FD6:  BCF    x1E.0
0FD8:  MOVLW  02
0FDA:  MOVWF  FEA
0FDC:  MOVLW  19
0FDE:  MOVWF  FE9
0FE0:  BRA    10C2
0FE2:  BTFSC  x1F.7
0FE4:  BRA    101E
0FE6:  MOVFF  217,21F
0FEA:  BTFSS  x1E.0
0FEC:  BRA    0FFA
0FEE:  RRCF   x24,F
0FF0:  RRCF   x23,F
0FF2:  RRCF   x22,F
0FF4:  RRCF   x21,F
0FF6:  INCF   00,F
0FF8:  BZ    1092
0FFA:  BTFSS  x21.7
0FFC:  BRA    1014
0FFE:  INCF   x22,F
1000:  BNZ   1014
1002:  INCF   x23,F
1004:  BNZ   1014
1006:  INCF   x24,F
1008:  BNZ   1014
100A:  RRCF   x24,F
100C:  RRCF   x23,F
100E:  RRCF   x22,F
1010:  INCF   00,F
1012:  BZ    1092
1014:  BTFSC  x20.6
1016:  BRA    0F20
1018:  BTFSC  x20.7
101A:  BRA    0FA8
101C:  BRA    1056
101E:  MOVLW  80
1020:  XORWF  x24,F
1022:  BTFSS  x24.7
1024:  BRA    102E
1026:  BRA    109C
1028:  MOVFF  21B,21F
102C:  BRA    1042
102E:  MOVFF  217,21F
1032:  MOVF   x24,F
1034:  BNZ   1042
1036:  MOVF   x23,F
1038:  BNZ   1042
103A:  MOVF   x22,F
103C:  BNZ   1042
103E:  CLRF   00
1040:  BRA    1084
1042:  BTFSC  x24.7
1044:  BRA    1056
1046:  BCF    FD8.0
1048:  RLCF   x21,F
104A:  RLCF   x22,F
104C:  RLCF   x23,F
104E:  RLCF   x24,F
1050:  DECFSZ 00,F
1052:  BRA    1042
1054:  BRA    1092
1056:  BTFSS  x1F.7
1058:  BRA    105E
105A:  BSF    x24.7
105C:  BRA    1084
105E:  BCF    x24.7
1060:  BRA    1084
1062:  MOVFF  21A,00
1066:  MOVFF  21B,224
106A:  MOVFF  21C,223
106E:  MOVFF  21D,222
1072:  BRA    1084
1074:  MOVFF  216,00
1078:  MOVFF  217,224
107C:  MOVFF  218,223
1080:  MOVFF  219,222
1084:  MOVFF  224,01
1088:  MOVFF  223,02
108C:  MOVFF  222,03
1090:  BRA    10FA
1092:  CLRF   00
1094:  CLRF   01
1096:  CLRF   02
1098:  CLRF   03
109A:  BRA    10FA
109C:  CLRF   x21
109E:  COMF   x22,F
10A0:  COMF   x23,F
10A2:  COMF   x24,F
10A4:  COMF   x21,F
10A6:  INCF   x21,F
10A8:  BNZ   10B4
10AA:  INCF   x22,F
10AC:  BNZ   10B4
10AE:  INCF   x23,F
10B0:  BNZ   10B4
10B2:  INCF   x24,F
10B4:  BTFSC  x20.0
10B6:  BRA    0EDC
10B8:  BTFSC  x20.1
10BA:  BRA    0F64
10BC:  BTFSC  x20.2
10BE:  BRA    0FD2
10C0:  BRA    1028
10C2:  MOVF   FEF,W
10C4:  ADDWF  x22,F
10C6:  BNC   10D2
10C8:  INCF   x23,F
10CA:  BNZ   10D2
10CC:  INCF   x24,F
10CE:  BTFSC  FD8.2
10D0:  BSF    x1E.0
10D2:  MOVF   FED,F
10D4:  MOVF   FEF,W
10D6:  ADDWF  x23,F
10D8:  BNC   10E0
10DA:  INCF   x24,F
10DC:  BTFSC  FD8.2
10DE:  BSF    x1E.0
10E0:  MOVF   FED,F
10E2:  MOVF   FEF,W
10E4:  BTFSC  FEF.7
10E6:  BRA    10EA
10E8:  XORLW  80
10EA:  ADDWF  x24,F
10EC:  BTFSC  FD8.0
10EE:  BSF    x1E.0
10F0:  BTFSC  x20.4
10F2:  BRA    0EEC
10F4:  BTFSC  x20.5
10F6:  BRA    0F74
10F8:  BRA    0FE2
10FA:  MOVLB  0
10FC:  RETURN 0
*
1466:  MOVFF  FEA,209
146A:  MOVFF  FE9,208
146E:  MOVLB  2
1470:  SWAPF  x02,W
1472:  IORLW  F0
1474:  MOVWF  x04
1476:  ADDWF  x04,F
1478:  ADDLW  E2
147A:  MOVWF  x05
147C:  ADDLW  32
147E:  MOVWF  x07
1480:  MOVF   x02,W
1482:  ANDLW  0F
1484:  ADDWF  x05,F
1486:  ADDWF  x05,F
1488:  ADDWF  x07,F
148A:  ADDLW  E9
148C:  MOVWF  x06
148E:  ADDWF  x06,F
1490:  ADDWF  x06,F
1492:  SWAPF  x01,W
1494:  ANDLW  0F
1496:  ADDWF  x06,F
1498:  ADDWF  x07,F
149A:  RLCF   x06,F
149C:  RLCF   x07,F
149E:  COMF   x07,F
14A0:  RLCF   x07,F
14A2:  MOVF   x01,W
14A4:  ANDLW  0F
14A6:  ADDWF  x07,F
14A8:  RLCF   x04,F
14AA:  MOVLW  07
14AC:  MOVWF  x03
14AE:  MOVLW  0A
14B0:  DECF   x06,F
14B2:  ADDWF  x07,F
14B4:  BNC   14B0
14B6:  DECF   x05,F
14B8:  ADDWF  x06,F
14BA:  BNC   14B6
14BC:  DECF   x04,F
14BE:  ADDWF  x05,F
14C0:  BNC   14BC
14C2:  DECF   x03,F
14C4:  ADDWF  x04,F
14C6:  BNC   14C2
14C8:  MOVLW  02
14CA:  MOVWF  FEA
14CC:  MOVLW  03
14CE:  MOVWF  FE9
14D0:  MOVLW  07
14D2:  ANDWF  x08,W
14D4:  BCF    x08.6
14D6:  ADDWF  FE9,F
14D8:  MOVLW  07
14DA:  SUBWF  FE9,W
14DC:  BTFSC  FD8.2
14DE:  BSF    x08.6
14E0:  MOVF   FEF,W
14E2:  MOVWF  00
14E4:  BNZ   14F6
14E6:  BTFSC  x08.6
14E8:  BRA    14F6
14EA:  BTFSC  x08.4
14EC:  BRA    151A
14EE:  BTFSC  x08.3
14F0:  BRA    14F6
14F2:  MOVLW  20
14F4:  BRA    14FC
14F6:  BSF    x08.3
14F8:  BCF    x08.4
14FA:  MOVLW  30
14FC:  ADDWF  00,F
14FE:  MOVFF  FEA,202
1502:  MOVFF  FE9,201
1506:  MOVFF  00,20E
150A:  MOVLB  0
150C:  CALL   0486
1510:  MOVFF  202,FEA
1514:  MOVFF  201,FE9
1518:  MOVLB  2
151A:  MOVF   FEE,W
151C:  BTFSS  x08.6
151E:  BRA    14D8
1520:  MOVLB  0
1522:  GOTO   1EA8 (RETURN)
1526:  MOVLB  1
1528:  MOVF   xFE,W
152A:  BTFSC  FD8.2
152C:  BRA    1696
152E:  MOVLB  2
1530:  MOVWF  x0A
1532:  MOVF   x02,W
1534:  BTFSS  FD8.2
1536:  BRA    153C
1538:  MOVLB  1
153A:  BRA    1696
153C:  SUBWF  x0A,F
153E:  BNC   154E
1540:  MOVLW  7F
1542:  ADDWF  x0A,F
1544:  BTFSS  FD8.0
1546:  BRA    154C
1548:  MOVLB  1
154A:  BRA    1696
154C:  BRA    1562
154E:  MOVLW  81
1550:  SUBWF  x0A,F
1552:  BTFSC  FD8.0
1554:  BRA    155A
1556:  MOVLB  1
1558:  BRA    1696
155A:  BTFSS  FD8.2
155C:  BRA    1562
155E:  MOVLB  1
1560:  BRA    1696
1562:  MOVFF  20A,00
1566:  CLRF   01
1568:  CLRF   02
156A:  CLRF   03
156C:  CLRF   x09
156E:  MOVFF  1FF,208
1572:  BSF    x08.7
1574:  MOVFF  200,207
1578:  MOVFF  201,206
157C:  MOVLW  19
157E:  MOVWF  x0A
1580:  MOVF   x05,W
1582:  SUBWF  x06,F
1584:  BC    15A0
1586:  MOVLW  01
1588:  SUBWF  x07,F
158A:  BC    15A0
158C:  SUBWF  x08,F
158E:  BC    15A0
1590:  SUBWF  x09,F
1592:  BC    15A0
1594:  INCF   x09,F
1596:  INCF   x08,F
1598:  INCF   x07,F
159A:  MOVF   x05,W
159C:  ADDWF  x06,F
159E:  BRA    15F0
15A0:  MOVF   x04,W
15A2:  SUBWF  x07,F
15A4:  BC    15CA
15A6:  MOVLW  01
15A8:  SUBWF  x08,F
15AA:  BC    15CA
15AC:  SUBWF  x09,F
15AE:  BC    15CA
15B0:  INCF   x09,F
15B2:  INCF   x08,F
15B4:  MOVF   x04,W
15B6:  ADDWF  x07,F
15B8:  MOVF   x05,W
15BA:  ADDWF  x06,F
15BC:  BNC   15F0
15BE:  INCF   x07,F
15C0:  BNZ   15F0
15C2:  INCF   x08,F
15C4:  BNZ   15F0
15C6:  INCF   x09,F
15C8:  BRA    15F0
15CA:  MOVF   x03,W
15CC:  IORLW  80
15CE:  SUBWF  x08,F
15D0:  BC    15EE
15D2:  MOVLW  01
15D4:  SUBWF  x09,F
15D6:  BC    15EE
15D8:  INCF   x09,F
15DA:  MOVF   x03,W
15DC:  IORLW  80
15DE:  ADDWF  x08,F
15E0:  MOVF   x04,W
15E2:  ADDWF  x07,F
15E4:  BNC   15B8
15E6:  INCF   x08,F
15E8:  BNZ   15B8
15EA:  INCF   x09,F
15EC:  BRA    15B8
15EE:  BSF    03.0
15F0:  DECFSZ x0A,F
15F2:  BRA    15F6
15F4:  BRA    160C
15F6:  BCF    FD8.0
15F8:  RLCF   x06,F
15FA:  RLCF   x07,F
15FC:  RLCF   x08,F
15FE:  RLCF   x09,F
1600:  BCF    FD8.0
1602:  RLCF   03,F
1604:  RLCF   02,F
1606:  RLCF   01,F
1608:  RLCF   x0B,F
160A:  BRA    1580
160C:  BTFSS  x0B.0
160E:  BRA    161C
1610:  BCF    FD8.0
1612:  RRCF   01,F
1614:  RRCF   02,F
1616:  RRCF   03,F
1618:  RRCF   x0B,F
161A:  BRA    1624
161C:  DECFSZ 00,F
161E:  BRA    1624
1620:  MOVLB  1
1622:  BRA    1696
1624:  BTFSC  x0B.7
1626:  BRA    1664
1628:  BCF    FD8.0
162A:  RLCF   x06,F
162C:  RLCF   x07,F
162E:  RLCF   x08,F
1630:  RLCF   x09,F
1632:  MOVF   x05,W
1634:  SUBWF  x06,F
1636:  BC    1646
1638:  MOVLW  01
163A:  SUBWF  x07,F
163C:  BC    1646
163E:  SUBWF  x08,F
1640:  BC    1646
1642:  SUBWF  x09,F
1644:  BNC   1680
1646:  MOVF   x04,W
1648:  SUBWF  x07,F
164A:  BC    1656
164C:  MOVLW  01
164E:  SUBWF  x08,F
1650:  BC    1656
1652:  SUBWF  x09,F
1654:  BNC   1680
1656:  MOVF   x03,W
1658:  IORLW  80
165A:  SUBWF  x08,F
165C:  BC    1664
165E:  MOVLW  01
1660:  SUBWF  x09,F
1662:  BNC   1680
1664:  INCF   03,F
1666:  BNZ   1680
1668:  INCF   02,F
166A:  BNZ   1680
166C:  INCF   01,F
166E:  BNZ   1680
1670:  INCF   00,F
1672:  BTFSS  FD8.2
1674:  BRA    167A
1676:  MOVLB  1
1678:  BRA    1696
167A:  RRCF   01,F
167C:  RRCF   02,F
167E:  RRCF   03,F
1680:  MOVFF  1FF,20A
1684:  MOVF   x03,W
1686:  XORWF  x0A,F
1688:  BTFSS  x0A.7
168A:  BRA    1690
168C:  BSF    01.7
168E:  BRA    16A0
1690:  BCF    01.7
1692:  BRA    16A0
1694:  MOVLB  1
1696:  CLRF   00
1698:  CLRF   01
169A:  CLRF   02
169C:  CLRF   03
169E:  MOVLB  2
16A0:  MOVLB  0
16A2:  GOTO   1F04 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(crystal=20000000) 
*
026C:  MOVLW  02
026E:  MOVWF  FEA
0270:  MOVLW  0F
0272:  MOVWF  FE9
0274:  MOVF   FEF,W
0276:  BZ    0292
0278:  MOVLW  06
027A:  MOVWF  01
027C:  CLRF   00
027E:  DECFSZ 00,F
0280:  BRA    027E
0282:  DECFSZ 01,F
0284:  BRA    027C
0286:  MOVLW  7B
0288:  MOVWF  00
028A:  DECFSZ 00,F
028C:  BRA    028A
028E:  DECFSZ FEF,F
0290:  BRA    0278
0292:  RETURN 0
.................... #use FIXED_IO( A_outputs=PIN_A4,PIN_A3,PIN_A2,PIN_A1,PIN_A0 ) 
.................... #use FIXED_IO( E_outputs=PIN_E1,PIN_E0 ) 
....................  
.................... #define LED1   PIN_A0 
.................... #define LED2   PIN_A1 
.................... #define LED3   PIN_A2 
.................... #define LED4   PIN_A3 
.................... #define LED5   PIN_A4 
.................... #define LED6   PIN_C2 
.................... #define LDR_DO_3   PIN_B0 
.................... #define LDR_RE_3   PIN_B1 
.................... #define LDR_MI_3   PIN_B2 
.................... #define LDR_FA_3   PIN_B3 
.................... #define LDR_SOL_3   PIN_B4 
.................... #define LDR_LA_3   PIN_B5 
.................... #define LDR_SI_3   PIN_B6 
.................... #define LDR_DO_4   PIN_B7 
.................... #define BTN_UP   PIN_E2 
.................... #define BTN_DOWN   PIN_D0 
.................... #define BTN_ENTER   PIN_C6 
.................... #define BTN_CLOSE   PIN_C7 
.................... #define LED7   PIN_E0 
.................... #define LED8   PIN_E1 
....................  
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
10FE:  MOVLB  2
1100:  BCF    x11.0
....................    y = x; 
1102:  MOVFF  205,20A
1106:  MOVFF  204,209
110A:  MOVFF  203,208
110E:  MOVFF  202,207
....................  
....................    if (x < 0) 
1112:  MOVFF  205,215
1116:  MOVFF  204,214
111A:  MOVFF  203,213
111E:  MOVFF  202,212
1122:  CLRF   x19
1124:  CLRF   x18
1126:  CLRF   x17
1128:  CLRF   x16
112A:  MOVLB  0
112C:  RCALL  0CDA
112E:  BNC   113C
....................    { 
....................       s = 1; 
1130:  MOVLB  2
1132:  BSF    x11.0
....................       y = -y; 
1134:  MOVF   x08,W
1136:  XORLW  80
1138:  MOVWF  x08
113A:  MOVLB  0
....................    } 
....................  
....................    if (y <= 32768.0) 
113C:  MOVFF  20A,215
1140:  MOVFF  209,214
1144:  MOVFF  208,213
1148:  MOVFF  207,212
114C:  MOVLB  2
114E:  CLRF   x19
1150:  CLRF   x18
1152:  CLRF   x17
1154:  MOVLW  8E
1156:  MOVWF  x16
1158:  MOVLB  0
115A:  RCALL  0CDA
115C:  BC    1160
115E:  BNZ   118E
....................       res = (float32)(unsigned int16)y; 
1160:  MOVFF  20A,215
1164:  MOVFF  209,214
1168:  MOVFF  208,213
116C:  MOVFF  207,212
1170:  RCALL  0D54
1172:  MOVFF  02,217
1176:  MOVFF  01,216
117A:  RCALL  0CA4
117C:  MOVFF  03,20E
1180:  MOVFF  02,20D
1184:  MOVFF  01,20C
1188:  MOVFF  00,20B
118C:  BRA    131C
....................  
....................  else if (y < 10000000.0) 
118E:  MOVFF  20A,215
1192:  MOVFF  209,214
1196:  MOVFF  208,213
119A:  MOVFF  207,212
119E:  MOVLW  80
11A0:  MOVLB  2
11A2:  MOVWF  x19
11A4:  MOVLW  96
11A6:  MOVWF  x18
11A8:  MOVLW  18
11AA:  MOVWF  x17
11AC:  MOVLW  96
11AE:  MOVWF  x16
11B0:  MOVLB  0
11B2:  RCALL  0CDA
11B4:  BTFSS  FD8.0
11B6:  BRA    130C
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
11B8:  MOVFF  20A,215
11BC:  MOVFF  209,214
11C0:  MOVFF  208,213
11C4:  MOVFF  207,212
11C8:  MOVLB  2
11CA:  CLRF   x19
11CC:  CLRF   x18
11CE:  CLRF   x17
11D0:  MOVLW  70
11D2:  MOVWF  x16
11D4:  MOVLB  0
11D6:  RCALL  0D90
11D8:  MOVFF  03,215
11DC:  MOVFF  02,214
11E0:  MOVFF  01,213
11E4:  MOVFF  00,212
11E8:  RCALL  0D54
11EA:  MOVFF  02,210
11EE:  MOVFF  01,20F
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
11F2:  MOVFF  20A,215
11F6:  MOVFF  209,214
11FA:  MOVFF  208,213
11FE:  MOVFF  207,212
1202:  MOVLB  2
1204:  CLRF   x19
1206:  CLRF   x18
1208:  CLRF   x17
120A:  MOVLW  70
120C:  MOVWF  x16
120E:  MOVLB  0
1210:  RCALL  0D90
1212:  MOVFF  03,215
1216:  MOVFF  02,214
121A:  MOVFF  01,213
121E:  MOVFF  00,212
1222:  MOVFF  210,217
1226:  MOVFF  20F,216
122A:  RCALL  0CA4
122C:  BSF    FD8.1
122E:  MOVFF  215,219
1232:  MOVFF  214,218
1236:  MOVFF  213,217
123A:  MOVFF  212,216
123E:  MOVFF  03,21D
1242:  MOVFF  02,21C
1246:  MOVFF  01,21B
124A:  MOVFF  00,21A
124E:  RCALL  0E86
1250:  MOVLB  2
1252:  CLRF   x15
1254:  CLRF   x14
1256:  CLRF   x13
1258:  MOVLW  8E
125A:  MOVWF  x12
125C:  MOVFF  03,219
1260:  MOVFF  02,218
1264:  MOVFF  01,217
1268:  MOVFF  00,216
126C:  MOVLB  0
126E:  RCALL  0D90
1270:  MOVFF  03,20A
1274:  MOVFF  02,209
1278:  MOVFF  01,208
127C:  MOVFF  00,207
....................       res = 32768.0*(float32)l; 
1280:  MOVFF  210,217
1284:  MOVFF  20F,216
1288:  RCALL  0CA4
128A:  MOVLB  2
128C:  CLRF   x15
128E:  CLRF   x14
1290:  CLRF   x13
1292:  MOVLW  8E
1294:  MOVWF  x12
1296:  MOVFF  03,219
129A:  MOVFF  02,218
129E:  MOVFF  01,217
12A2:  MOVFF  00,216
12A6:  MOVLB  0
12A8:  RCALL  0D90
12AA:  MOVFF  03,20E
12AE:  MOVFF  02,20D
12B2:  MOVFF  01,20C
12B6:  MOVFF  00,20B
....................       res += (float32)(unsigned int16)y; 
12BA:  MOVFF  20A,215
12BE:  MOVFF  209,214
12C2:  MOVFF  208,213
12C6:  MOVFF  207,212
12CA:  RCALL  0D54
12CC:  MOVFF  02,217
12D0:  MOVFF  01,216
12D4:  RCALL  0CA4
12D6:  BCF    FD8.1
12D8:  MOVFF  20E,219
12DC:  MOVFF  20D,218
12E0:  MOVFF  20C,217
12E4:  MOVFF  20B,216
12E8:  MOVFF  03,21D
12EC:  MOVFF  02,21C
12F0:  MOVFF  01,21B
12F4:  MOVFF  00,21A
12F8:  RCALL  0E86
12FA:  MOVFF  03,20E
12FE:  MOVFF  02,20D
1302:  MOVFF  01,20C
1306:  MOVFF  00,20B
....................    } 
130A:  BRA    131C
....................  
....................  else 
....................   res = y; 
130C:  MOVFF  20A,20E
1310:  MOVFF  209,20D
1314:  MOVFF  208,20C
1318:  MOVFF  207,20B
....................  
....................  y = y - (float32)(unsigned int16)y; 
131C:  MOVFF  20A,215
1320:  MOVFF  209,214
1324:  MOVFF  208,213
1328:  MOVFF  207,212
132C:  RCALL  0D54
132E:  MOVFF  02,217
1332:  MOVFF  01,216
1336:  RCALL  0CA4
1338:  BSF    FD8.1
133A:  MOVFF  20A,219
133E:  MOVFF  209,218
1342:  MOVFF  208,217
1346:  MOVFF  207,216
134A:  MOVFF  03,21D
134E:  MOVFF  02,21C
1352:  MOVFF  01,21B
1356:  MOVFF  00,21A
135A:  RCALL  0E86
135C:  MOVFF  03,20A
1360:  MOVFF  02,209
1364:  MOVFF  01,208
1368:  MOVFF  00,207
....................  
....................  if (s) 
136C:  MOVLB  2
136E:  BTFSS  x11.0
1370:  BRA    1378
....................   res = -res; 
1372:  MOVF   x0C,W
1374:  XORLW  80
1376:  MOVWF  x0C
....................  
....................  if (y != 0) 
1378:  MOVFF  20A,215
137C:  MOVFF  209,214
1380:  MOVFF  208,213
1384:  MOVFF  207,212
1388:  CLRF   x19
138A:  CLRF   x18
138C:  CLRF   x17
138E:  CLRF   x16
1390:  MOVLB  0
1392:  RCALL  0CDA
1394:  BZ    140A
....................  { 
....................   if (s == 1 && n == 0) 
1396:  MOVLB  2
1398:  BTFSS  x11.0
139A:  BRA    13D2
139C:  MOVF   x06,F
139E:  BNZ   13D2
....................    res -= 1.0; 
13A0:  BSF    FD8.1
13A2:  MOVFF  20E,219
13A6:  MOVFF  20D,218
13AA:  MOVFF  20C,217
13AE:  MOVFF  20B,216
13B2:  CLRF   x1D
13B4:  CLRF   x1C
13B6:  CLRF   x1B
13B8:  MOVLW  7F
13BA:  MOVWF  x1A
13BC:  MOVLB  0
13BE:  RCALL  0E86
13C0:  MOVFF  03,20E
13C4:  MOVFF  02,20D
13C8:  MOVFF  01,20C
13CC:  MOVFF  00,20B
13D0:  MOVLB  2
....................  
....................   if (s == 0 && n == 1) 
13D2:  BTFSC  x11.0
13D4:  BRA    140C
13D6:  DECFSZ x06,W
13D8:  BRA    140C
....................    res += 1.0; 
13DA:  BCF    FD8.1
13DC:  MOVFF  20E,219
13E0:  MOVFF  20D,218
13E4:  MOVFF  20C,217
13E8:  MOVFF  20B,216
13EC:  CLRF   x1D
13EE:  CLRF   x1C
13F0:  CLRF   x1B
13F2:  MOVLW  7F
13F4:  MOVWF  x1A
13F6:  MOVLB  0
13F8:  RCALL  0E86
13FA:  MOVFF  03,20E
13FE:  MOVFF  02,20D
1402:  MOVFF  01,20C
1406:  MOVFF  00,20B
140A:  MOVLB  2
....................  } 
....................  if (x == 0) 
140C:  MOVFF  205,215
1410:  MOVFF  204,214
1414:  MOVFF  203,213
1418:  MOVFF  202,212
141C:  CLRF   x19
141E:  CLRF   x18
1420:  CLRF   x17
1422:  CLRF   x16
1424:  MOVLB  0
1426:  RCALL  0CDA
1428:  BNZ   1436
....................     res = 0; 
142A:  MOVLB  2
142C:  CLRF   x0E
142E:  CLRF   x0D
1430:  CLRF   x0C
1432:  CLRF   x0B
1434:  MOVLB  0
....................  
....................  return (res); 
1436:  MOVFF  20B,00
143A:  MOVFF  20C,01
143E:  MOVFF  20D,02
1442:  MOVFF  20E,03
1446:  GOTO   1464 (RETURN)
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
144A:  MOVFF  201,205
144E:  MOVFF  200,204
1452:  MOVFF  1FF,203
1456:  MOVFF  1FE,202
145A:  MOVLW  01
145C:  MOVLB  2
145E:  MOVWF  x06
1460:  MOVLB  0
1462:  BRA    10FE
1464:  RETURN 0
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_D1 
.................... #define LCD_RS_PIN PIN_D3 
.................... #define LCD_RW_PIN PIN_D2 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0336:  BSF    F95.4
....................    output_float(LCD_DATA5); 
0338:  BSF    F95.5
....................    output_float(LCD_DATA6); 
033A:  BSF    F95.6
....................    output_float(LCD_DATA7); 
033C:  BSF    F95.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
033E:  BSF    F8C.2
0340:  BCF    F95.2
....................    delay_cycles(1); 
0342:  NOP   
....................    lcd_output_enable(1); 
0344:  BSF    F8C.1
0346:  BCF    F95.1
....................    delay_cycles(1); 
0348:  NOP   
....................    high = lcd_read_nibble(); 
034A:  RCALL  02E0
034C:  MOVFF  01,216
....................        
....................    lcd_output_enable(0); 
0350:  BCF    F8C.1
0352:  BCF    F95.1
....................    delay_cycles(1); 
0354:  NOP   
....................    lcd_output_enable(1); 
0356:  BSF    F8C.1
0358:  BCF    F95.1
....................    delay_us(1); 
035A:  BRA    035C
035C:  BRA    035E
035E:  NOP   
....................    low = lcd_read_nibble(); 
0360:  RCALL  02E0
0362:  MOVFF  01,215
....................        
....................    lcd_output_enable(0); 
0366:  BCF    F8C.1
0368:  BCF    F95.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
036A:  BCF    F95.4
....................    output_drive(LCD_DATA5); 
036C:  BCF    F95.5
....................    output_drive(LCD_DATA6); 
036E:  BCF    F95.6
....................    output_drive(LCD_DATA7); 
0370:  BCF    F95.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0372:  MOVLB  2
0374:  SWAPF  x16,W
0376:  MOVWF  00
0378:  MOVLW  F0
037A:  ANDWF  00,F
037C:  MOVF   00,W
037E:  IORWF  x15,W
0380:  MOVWF  01
0382:  MOVLB  0
0384:  GOTO   0394 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
02E0:  MOVLB  2
02E2:  CLRF   x17
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
02E4:  BSF    F95.4
02E6:  MOVLW  00
02E8:  BTFSC  F83.4
02EA:  MOVLW  01
02EC:  IORWF  x17,F
....................    n |= input(LCD_DATA5) << 1; 
02EE:  BSF    F95.5
02F0:  MOVLW  00
02F2:  BTFSC  F83.5
02F4:  MOVLW  01
02F6:  MOVWF  00
02F8:  BCF    FD8.0
02FA:  RLCF   00,F
02FC:  MOVF   00,W
02FE:  IORWF  x17,F
....................    n |= input(LCD_DATA6) << 2; 
0300:  BSF    F95.6
0302:  MOVLW  00
0304:  BTFSC  F83.6
0306:  MOVLW  01
0308:  MOVWF  00
030A:  RLCF   00,F
030C:  RLCF   00,F
030E:  MOVLW  FC
0310:  ANDWF  00,F
0312:  MOVF   00,W
0314:  IORWF  x17,F
....................    n |= input(LCD_DATA7) << 3; 
0316:  BSF    F95.7
0318:  MOVLW  00
031A:  BTFSC  F83.7
031C:  MOVLW  01
031E:  MOVWF  00
0320:  RLCF   00,F
0322:  RLCF   00,F
0324:  RLCF   00,F
0326:  MOVLW  F8
0328:  ANDWF  00,F
032A:  MOVF   00,W
032C:  IORWF  x17,F
....................     
....................    return(n); 
032E:  MOVFF  217,01
....................   #else 
0332:  MOVLB  0
0334:  RETURN 0
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0294:  MOVLB  2
0296:  BTFSC  x16.0
0298:  BRA    029E
029A:  BCF    F8C.4
029C:  BRA    02A0
029E:  BSF    F8C.4
02A0:  BCF    F95.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
02A2:  BTFSC  x16.1
02A4:  BRA    02AA
02A6:  BCF    F8C.5
02A8:  BRA    02AC
02AA:  BSF    F8C.5
02AC:  BCF    F95.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
02AE:  BTFSC  x16.2
02B0:  BRA    02B6
02B2:  BCF    F8C.6
02B4:  BRA    02B8
02B6:  BSF    F8C.6
02B8:  BCF    F95.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
02BA:  BTFSC  x16.3
02BC:  BRA    02C2
02BE:  BCF    F8C.7
02C0:  BRA    02C4
02C2:  BSF    F8C.7
02C4:  BCF    F95.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
02C6:  NOP   
....................    lcd_output_enable(1); 
02C8:  BSF    F8C.1
02CA:  BCF    F95.1
....................    delay_us(2); 
02CC:  MOVLW  02
02CE:  MOVWF  00
02D0:  DECFSZ 00,F
02D2:  BRA    02D0
02D4:  BRA    02D6
02D6:  NOP   
....................    lcd_output_enable(0); 
02D8:  BCF    F8C.1
02DA:  BCF    F95.1
02DC:  MOVLB  0
02DE:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0388:  BCF    F95.1
....................    lcd_rs_tris(); 
038A:  BCF    F95.3
....................    lcd_rw_tris(); 
038C:  BCF    F95.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
038E:  BCF    F8C.3
0390:  BCF    F95.3
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0392:  BRA    0336
0394:  MOVFF  01,215
0398:  MOVLB  2
039A:  BTFSS  01.7
039C:  BRA    03A2
039E:  MOVLB  0
03A0:  BRA    0392
....................    lcd_output_rs(address); 
03A2:  MOVF   x13,F
03A4:  BNZ   03AA
03A6:  BCF    F8C.3
03A8:  BRA    03AC
03AA:  BSF    F8C.3
03AC:  BCF    F95.3
....................    delay_cycles(1); 
03AE:  NOP   
....................    lcd_output_rw(0); 
03B0:  BCF    F8C.2
03B2:  BCF    F95.2
....................    delay_cycles(1); 
03B4:  NOP   
....................    lcd_output_enable(0); 
03B6:  BCF    F8C.1
03B8:  BCF    F95.1
....................    lcd_send_nibble(n >> 4); 
03BA:  SWAPF  x14,W
03BC:  MOVWF  x15
03BE:  MOVLW  0F
03C0:  ANDWF  x15,F
03C2:  MOVFF  215,216
03C6:  MOVLB  0
03C8:  RCALL  0294
....................    lcd_send_nibble(n & 0xf); 
03CA:  MOVLB  2
03CC:  MOVF   x14,W
03CE:  ANDLW  0F
03D0:  MOVWF  x15
03D2:  MOVWF  x16
03D4:  MOVLB  0
03D6:  RCALL  0294
03D8:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
03DA:  BCF    F95.4
....................    output_drive(LCD_DATA5); 
03DC:  BCF    F95.5
....................    output_drive(LCD_DATA6); 
03DE:  BCF    F95.6
....................    output_drive(LCD_DATA7); 
03E0:  BCF    F95.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
03E2:  BCF    F95.1
....................    lcd_rs_tris(); 
03E4:  BCF    F95.3
....................    lcd_rw_tris(); 
03E6:  BCF    F95.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
03E8:  BCF    F8C.3
03EA:  BCF    F95.3
....................    lcd_output_rw(0); 
03EC:  BCF    F8C.2
03EE:  BCF    F95.2
....................    lcd_output_enable(0); 
03F0:  BCF    F8C.1
03F2:  BCF    F95.1
....................      
....................    delay_ms(15); 
03F4:  MOVLW  0F
03F6:  MOVLB  2
03F8:  MOVWF  x0F
03FA:  MOVLB  0
03FC:  RCALL  026C
....................    for(i=1;i<=3;++i) 
03FE:  MOVLW  01
0400:  MOVWF  4E
0402:  MOVF   4E,W
0404:  SUBLW  03
0406:  BNC   0420
....................    { 
....................        lcd_send_nibble(3); 
0408:  MOVLW  03
040A:  MOVLB  2
040C:  MOVWF  x16
040E:  MOVLB  0
0410:  RCALL  0294
....................        delay_ms(5); 
0412:  MOVLW  05
0414:  MOVLB  2
0416:  MOVWF  x0F
0418:  MOVLB  0
041A:  RCALL  026C
041C:  INCF   4E,F
041E:  BRA    0402
....................    } 
....................     
....................    lcd_send_nibble(2); 
0420:  MOVLW  02
0422:  MOVLB  2
0424:  MOVWF  x16
0426:  MOVLB  0
0428:  RCALL  0294
....................    delay_ms(5); 
042A:  MOVLW  05
042C:  MOVLB  2
042E:  MOVWF  x0F
0430:  MOVLB  0
0432:  RCALL  026C
....................    for(i=0;i<=3;++i) 
0434:  CLRF   4E
0436:  MOVF   4E,W
0438:  SUBLW  03
043A:  BNC   045C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
043C:  CLRF   03
043E:  MOVF   4E,W
0440:  MOVFF  FF2,4F
0444:  BCF    FF2.7
0446:  RCALL  0004
0448:  BTFSC  4F.7
044A:  BSF    FF2.7
044C:  MOVWF  4F
044E:  MOVLB  2
0450:  CLRF   x13
0452:  MOVWF  x14
0454:  MOVLB  0
0456:  RCALL  0388
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0458:  INCF   4E,F
045A:  BRA    0436
045C:  GOTO   2634 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0460:  MOVLB  2
0462:  DECFSZ x10,W
0464:  BRA    0468
0466:  BRA    046E
....................       address=LCD_LINE_TWO; 
0468:  MOVLW  40
046A:  MOVWF  x11
046C:  BRA    0470
....................    else 
....................       address=0; 
046E:  CLRF   x11
....................       
....................    address+=x-1; 
0470:  MOVLW  01
0472:  SUBWF  x0F,W
0474:  ADDWF  x11,F
....................    lcd_send_byte(0,0x80|address); 
0476:  MOVF   x11,W
0478:  IORLW  80
047A:  MOVWF  x12
047C:  CLRF   x13
047E:  MOVWF  x14
0480:  MOVLB  0
0482:  RCALL  0388
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0484:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0486:  MOVLB  2
0488:  MOVF   x0E,W
048A:  XORLW  07
048C:  MOVLB  0
048E:  BZ    049E
0490:  XORLW  0B
0492:  BZ    04AC
0494:  XORLW  06
0496:  BZ    04C4
0498:  XORLW  02
049A:  BZ    04D4
049C:  BRA    04E2
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
049E:  MOVLW  01
04A0:  MOVLB  2
04A2:  MOVWF  x0F
04A4:  MOVWF  x10
04A6:  MOVLB  0
04A8:  RCALL  0460
04AA:  BRA    04F0
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
04AC:  MOVLB  2
04AE:  CLRF   x13
04B0:  MOVLW  01
04B2:  MOVWF  x14
04B4:  MOVLB  0
04B6:  RCALL  0388
....................                      delay_ms(2); 
04B8:  MOVLW  02
04BA:  MOVLB  2
04BC:  MOVWF  x0F
04BE:  MOVLB  0
04C0:  RCALL  026C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
04C2:  BRA    04F0
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
04C4:  MOVLW  01
04C6:  MOVLB  2
04C8:  MOVWF  x0F
04CA:  MOVLW  02
04CC:  MOVWF  x10
04CE:  MOVLB  0
04D0:  RCALL  0460
04D2:  BRA    04F0
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
04D4:  MOVLB  2
04D6:  CLRF   x13
04D8:  MOVLW  10
04DA:  MOVWF  x14
04DC:  MOVLB  0
04DE:  RCALL  0388
04E0:  BRA    04F0
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
04E2:  MOVLW  01
04E4:  MOVLB  2
04E6:  MOVWF  x13
04E8:  MOVFF  20E,214
04EC:  MOVLB  0
04EE:  RCALL  0388
....................      #endif 
....................    } 
04F0:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... const int8 DO_3 = 0b11111110; 
.................... const int8 RE_3 = 0b11111101; 
.................... const int8 MI_3 = 0b11111011; 
.................... const int8 FA_3 = 0b11110111; 
.................... const int8 SOL_3 = 0b11101111; 
.................... const int8 LA_3 = 0b11011111; 
.................... const int8 SI_3 = 0b10111111; 
.................... const int8 DO_4 = 0b01111111; 
.................... const int8 PAUSA = 0b11111111; 
....................  
.................... CONST int QUANT_MUSICAS = 4; 
....................  
....................  
.................... int menuPrincipal(); //Menu 
.................... int listaMusicas();  //Menu 1 
.................... void records(); //Menu 2 
.................... int tocar_musica(int index); // Retorna a pontuação dada em percentual 
....................  
.................... void notesToLeds(int8 note);  //Acende  o led que corresponde a nota a ser tocada 
.................... void qualificarPrecisao(int8 index,int8 acertos_nota); 
.................... void salvar(int8 pontuacao,int8 index);    
.................... void animacaoLogo(); 
.................... void ledEffect(); 
.................... void carregar(); // Prepara o usuário para começar a jogar 
.................... void apagarLeds(); 
....................  
....................  
....................  
.................... struct musica { 
.................... char titulo[16]; 
.................... int tempo; 
.................... }; 
....................  
.................... struct musica sound[QUANT_MUSICAS]; 
....................  
....................  
....................  
.................... //duraçao_nota = tempo_musica/duracao[i] 
....................  
.................... int index_Nivel1 = 0; 
.................... int index_Nivel2 = 0; 
.................... boolean flag_control = 1; 
....................  
.................... boolean flag_ENTER = FALSE;  
.................... boolean flag_CLOSE = FALSE;  
.................... boolean flag_DOWN = FALSE;  
.................... boolean flag_UP = FALSE;  
....................  
....................  
....................  
.................... void main() 
*
2390:  CLRF   FF8
2392:  BCF    FD0.7
2394:  CLRF   48
2396:  CLRF   49
2398:  BSF    4A.0
239A:  BCF    4A.1
239C:  BCF    4A.2
239E:  BCF    4A.3
23A0:  BCF    4A.4
23A2:  MOVF   FC1,W
23A4:  ANDLW  C0
23A6:  IORLW  0F
23A8:  MOVWF  FC1
23AA:  MOVLW  07
23AC:  MOVWF  FB4
.................... { 
....................     
....................    sound[0].titulo = "DO RE MI FA"; 
23AE:  CLRF   FEA
23B0:  MOVLW  04
23B2:  MOVWF  FE9
23B4:  MOVFF  FF2,4E
23B8:  BCF    FF2.7
23BA:  MOVLW  00
23BC:  CALL   0018
23C0:  TBLRD*-
23C2:  TBLRD*+
23C4:  MOVF   FF5,W
23C6:  MOVWF  FEE
23C8:  IORLW  00
23CA:  BNZ   23C2
23CC:  BTFSC  4E.7
23CE:  BSF    FF2.7
....................    sound[0].tempo = 100; 
23D0:  MOVLW  64
23D2:  MOVWF  14
....................     
....................    sound[1].titulo = "ASA BRANCA"; 
23D4:  CLRF   FEA
23D6:  MOVLW  15
23D8:  MOVWF  FE9
23DA:  MOVFF  FF2,4E
23DE:  BCF    FF2.7
23E0:  MOVLW  00
23E2:  CALL   0034
23E6:  TBLRD*-
23E8:  TBLRD*+
23EA:  MOVF   FF5,W
23EC:  MOVWF  FEE
23EE:  IORLW  00
23F0:  BNZ   23E8
23F2:  BTFSC  4E.7
23F4:  BSF    FF2.7
....................    sound[1].tempo = 120; 
23F6:  MOVLW  78
23F8:  MOVWF  25
....................     
....................    sound[2].titulo = "INDIANA JONES"; 
23FA:  CLRF   FEA
23FC:  MOVLW  26
23FE:  MOVWF  FE9
2400:  MOVFF  FF2,4E
2404:  BCF    FF2.7
2406:  MOVLW  00
2408:  CALL   0050
240C:  TBLRD*-
240E:  TBLRD*+
2410:  MOVF   FF5,W
2412:  MOVWF  FEE
2414:  IORLW  00
2416:  BNZ   240E
2418:  BTFSC  4E.7
241A:  BSF    FF2.7
....................    sound[2].tempo = 120; 
241C:  MOVLW  78
241E:  MOVWF  36
....................     
....................    sound[3].titulo = "SYMPHONY No. 9"; 
2420:  CLRF   FEA
2422:  MOVLW  37
2424:  MOVWF  FE9
2426:  MOVFF  FF2,4E
242A:  BCF    FF2.7
242C:  MOVLW  00
242E:  CALL   006E
2432:  TBLRD*-
2434:  TBLRD*+
2436:  MOVF   FF5,W
2438:  MOVWF  FEE
243A:  IORLW  00
243C:  BNZ   2434
243E:  BTFSC  4E.7
2440:  BSF    FF2.7
....................    sound[3].tempo = 70; 
2442:  MOVLW  46
2444:  MOVWF  47
....................     
....................    int valor = 0; 
2446:  CLRF   4B
....................    valor = read_eeprom(0x00); 
2448:  MOVFF  FF2,4E
244C:  BCF    FF2.7
244E:  CLRF   FA9
2450:  BCF    FA6.6
2452:  BCF    FA6.7
2454:  BSF    FA6.0
2456:  MOVF   FA8,W
2458:  BTFSC  4E.7
245A:  BSF    FF2.7
245C:  MOVWF  4B
....................    if(valor==255){ 
245E:  INCFSZ 4B,W
2460:  BRA    2630
....................    for(int j = 0; j<10;j++){ 
2462:  CLRF   4C
2464:  MOVF   4C,W
2466:  SUBLW  09
2468:  BNC   24A2
....................    write_eeprom(j,20-j); 
246A:  MOVLW  14
246C:  BSF    FD8.0
246E:  SUBFWB 4C,W
2470:  MOVWF  4E
2472:  MOVF   FF2,W
2474:  MOVWF  00
2476:  BCF    FF2.7
2478:  MOVFF  4C,FA9
247C:  MOVFF  4E,FA8
2480:  BCF    FA6.6
2482:  BCF    FA6.7
2484:  BSF    FA6.2
2486:  MOVLB  F
2488:  MOVLW  55
248A:  MOVWF  FA7
248C:  MOVLW  AA
248E:  MOVWF  FA7
2490:  BSF    FA6.1
2492:  BTFSC  FA6.1
2494:  BRA    2492
2496:  BCF    FA6.2
2498:  MOVF   00,W
249A:  IORWF  FF2,F
249C:  INCF   4C,F
249E:  MOVLB  0
24A0:  BRA    2464
....................    } 
....................    write_eeprom(0x0A,0); 
24A2:  MOVF   FF2,W
24A4:  MOVWF  00
24A6:  BCF    FF2.7
24A8:  MOVLW  0A
24AA:  MOVWF  FA9
24AC:  CLRF   FA8
24AE:  BCF    FA6.6
24B0:  BCF    FA6.7
24B2:  BSF    FA6.2
24B4:  MOVLB  F
24B6:  MOVLW  55
24B8:  MOVWF  FA7
24BA:  MOVLW  AA
24BC:  MOVWF  FA7
24BE:  BSF    FA6.1
24C0:  BTFSC  FA6.1
24C2:  BRA    24C0
24C4:  BCF    FA6.2
24C6:  MOVF   00,W
24C8:  IORWF  FF2,F
....................    write_eeprom(0x0B,1); 
24CA:  MOVFF  FF2,00
24CE:  BCF    FF2.7
24D0:  MOVLW  0B
24D2:  MOVWF  FA9
24D4:  MOVLW  01
24D6:  MOVWF  FA8
24D8:  BCF    FA6.6
24DA:  BCF    FA6.7
24DC:  BSF    FA6.2
24DE:  MOVLW  55
24E0:  MOVWF  FA7
24E2:  MOVLW  AA
24E4:  MOVWF  FA7
24E6:  BSF    FA6.1
24E8:  BTFSC  FA6.1
24EA:  BRA    24E8
24EC:  BCF    FA6.2
24EE:  MOVF   00,W
24F0:  IORWF  FF2,F
....................    write_eeprom(0x0C,2); 
24F2:  MOVFF  FF2,00
24F6:  BCF    FF2.7
24F8:  MOVLW  0C
24FA:  MOVWF  FA9
24FC:  MOVLW  02
24FE:  MOVWF  FA8
2500:  BCF    FA6.6
2502:  BCF    FA6.7
2504:  BSF    FA6.2
2506:  MOVLW  55
2508:  MOVWF  FA7
250A:  MOVLW  AA
250C:  MOVWF  FA7
250E:  BSF    FA6.1
2510:  BTFSC  FA6.1
2512:  BRA    2510
2514:  BCF    FA6.2
2516:  MOVF   00,W
2518:  IORWF  FF2,F
....................    write_eeprom(0x0D,0); 
251A:  MOVFF  FF2,00
251E:  BCF    FF2.7
2520:  MOVLW  0D
2522:  MOVWF  FA9
2524:  CLRF   FA8
2526:  BCF    FA6.6
2528:  BCF    FA6.7
252A:  BSF    FA6.2
252C:  MOVLW  55
252E:  MOVWF  FA7
2530:  MOVLW  AA
2532:  MOVWF  FA7
2534:  BSF    FA6.1
2536:  BTFSC  FA6.1
2538:  BRA    2536
253A:  BCF    FA6.2
253C:  MOVF   00,W
253E:  IORWF  FF2,F
....................    write_eeprom(0x0E,1); 
2540:  MOVFF  FF2,00
2544:  BCF    FF2.7
2546:  MOVLW  0E
2548:  MOVWF  FA9
254A:  MOVLW  01
254C:  MOVWF  FA8
254E:  BCF    FA6.6
2550:  BCF    FA6.7
2552:  BSF    FA6.2
2554:  MOVLW  55
2556:  MOVWF  FA7
2558:  MOVLW  AA
255A:  MOVWF  FA7
255C:  BSF    FA6.1
255E:  BTFSC  FA6.1
2560:  BRA    255E
2562:  BCF    FA6.2
2564:  MOVF   00,W
2566:  IORWF  FF2,F
....................    write_eeprom(0x0F,2); 
2568:  MOVFF  FF2,00
256C:  BCF    FF2.7
256E:  MOVLW  0F
2570:  MOVWF  FA9
2572:  MOVLW  02
2574:  MOVWF  FA8
2576:  BCF    FA6.6
2578:  BCF    FA6.7
257A:  BSF    FA6.2
257C:  MOVLW  55
257E:  MOVWF  FA7
2580:  MOVLW  AA
2582:  MOVWF  FA7
2584:  BSF    FA6.1
2586:  BTFSC  FA6.1
2588:  BRA    2586
258A:  BCF    FA6.2
258C:  MOVF   00,W
258E:  IORWF  FF2,F
....................    write_eeprom(0x10,2); 
2590:  MOVFF  FF2,00
2594:  BCF    FF2.7
2596:  MOVLW  10
2598:  MOVWF  FA9
259A:  MOVLW  02
259C:  MOVWF  FA8
259E:  BCF    FA6.6
25A0:  BCF    FA6.7
25A2:  BSF    FA6.2
25A4:  MOVLW  55
25A6:  MOVWF  FA7
25A8:  MOVLW  AA
25AA:  MOVWF  FA7
25AC:  BSF    FA6.1
25AE:  BTFSC  FA6.1
25B0:  BRA    25AE
25B2:  BCF    FA6.2
25B4:  MOVF   00,W
25B6:  IORWF  FF2,F
....................    write_eeprom(0x11,0); 
25B8:  MOVFF  FF2,00
25BC:  BCF    FF2.7
25BE:  MOVLW  11
25C0:  MOVWF  FA9
25C2:  CLRF   FA8
25C4:  BCF    FA6.6
25C6:  BCF    FA6.7
25C8:  BSF    FA6.2
25CA:  MOVLW  55
25CC:  MOVWF  FA7
25CE:  MOVLW  AA
25D0:  MOVWF  FA7
25D2:  BSF    FA6.1
25D4:  BTFSC  FA6.1
25D6:  BRA    25D4
25D8:  BCF    FA6.2
25DA:  MOVF   00,W
25DC:  IORWF  FF2,F
....................    write_eeprom(0x12,1); 
25DE:  MOVFF  FF2,00
25E2:  BCF    FF2.7
25E4:  MOVLW  12
25E6:  MOVWF  FA9
25E8:  MOVLW  01
25EA:  MOVWF  FA8
25EC:  BCF    FA6.6
25EE:  BCF    FA6.7
25F0:  BSF    FA6.2
25F2:  MOVLW  55
25F4:  MOVWF  FA7
25F6:  MOVLW  AA
25F8:  MOVWF  FA7
25FA:  BSF    FA6.1
25FC:  BTFSC  FA6.1
25FE:  BRA    25FC
2600:  BCF    FA6.2
2602:  MOVF   00,W
2604:  IORWF  FF2,F
....................    write_eeprom(0x13,2); 
2606:  MOVFF  FF2,00
260A:  BCF    FF2.7
260C:  MOVLW  13
260E:  MOVWF  FA9
2610:  MOVLW  02
2612:  MOVWF  FA8
2614:  BCF    FA6.6
2616:  BCF    FA6.7
2618:  BSF    FA6.2
261A:  MOVLW  55
261C:  MOVWF  FA7
261E:  MOVLW  AA
2620:  MOVWF  FA7
2622:  BSF    FA6.1
2624:  BTFSC  FA6.1
2626:  BRA    2624
2628:  BCF    FA6.2
262A:  MOVF   00,W
262C:  IORWF  FF2,F
262E:  MOVLB  0
....................    } 
....................     
....................    lcd_init(); 
2630:  GOTO   03DA
....................    animacaoLogo(); 
2634:  GOTO   0512
....................     
....................     
....................    while(TRUE) 
....................    { 
....................       
....................       index_nivel1 = menuPrincipal(); 
2638:  GOTO   0654
263C:  MOVFF  01,48
....................       flag_control = true; 
2640:  BSF    4A.0
....................       if(index_nivel1 == 1){ 
2642:  DECFSZ 48,W
2644:  BRA    2678
....................  
....................          index_nivel2 = listaMusicas();  
2646:  GOTO   07A4
264A:  MOVFF  01,49
....................          flag_control = true; 
264E:  BSF    4A.0
....................          if(index_nivel2>0){ 
2650:  MOVF   49,F
2652:  BZ    2676
....................             carregar(); 
2654:  GOTO   0A06
....................             int pontuacao =  tocar_musica(index_nivel2-1); 
2658:  MOVLW  01
265A:  SUBWF  49,W
265C:  MOVWF  4E
265E:  MOVWF  4F
2660:  GOTO   16A6
2664:  MOVFF  01,4D
....................             salvar(pontuacao, index_nivel2-1); 
2668:  MOVLW  01
266A:  SUBWF  49,W
266C:  MOVWF  4E
266E:  MOVFF  4D,4F
2672:  MOVWF  50
2674:  BRA    1FE6
....................          } 
....................       } 
2676:  BRA    267C
....................       else{ 
....................          records(); 
2678:  BRA    21FE
....................          flag_control = true; 
267A:  BSF    4A.0
....................       } 
267C:  BRA    2638
....................    }     
.................... } 
....................  
267E:  SLEEP 
....................  
.................... void carregar(){ 
....................    printf(lcd_putc, "\f"); 
*
0A06:  MOVLW  0C
0A08:  MOVLB  2
0A0A:  MOVWF  x0E
0A0C:  MOVLB  0
0A0E:  RCALL  0486
....................    lcd_gotoxy(1,1); 
0A10:  MOVLW  01
0A12:  MOVLB  2
0A14:  MOVWF  x0F
0A16:  MOVWF  x10
0A18:  MOVLB  0
0A1A:  RCALL  0460
....................    printf(lcd_putc, "  CARREGANDO.."); 
0A1C:  MOVLW  1A
0A1E:  MOVWF  FF6
0A20:  MOVLW  01
0A22:  MOVWF  FF7
0A24:  RCALL  04F2
....................    ledEffect(); 
0A26:  BRA    0956
....................    apagarLeds(); 
0A28:  RCALL  08C8
....................    delay_ms(1000); 
0A2A:  MOVLW  04
0A2C:  MOVWF  4E
0A2E:  MOVLW  FA
0A30:  MOVLB  2
0A32:  MOVWF  x0F
0A34:  MOVLB  0
0A36:  RCALL  026C
0A38:  DECFSZ 4E,F
0A3A:  BRA    0A2E
....................    lcd_gotoxy(1,2); 
0A3C:  MOVLW  01
0A3E:  MOVLB  2
0A40:  MOVWF  x0F
0A42:  MOVLW  02
0A44:  MOVWF  x10
0A46:  MOVLB  0
0A48:  RCALL  0460
....................    printf(lcd_putc, "   3.."); 
0A4A:  MOVLW  2A
0A4C:  MOVWF  FF6
0A4E:  MOVLW  01
0A50:  MOVWF  FF7
0A52:  RCALL  04F2
....................    delay_ms(1000); 
0A54:  MOVLW  04
0A56:  MOVWF  4E
0A58:  MOVLW  FA
0A5A:  MOVLB  2
0A5C:  MOVWF  x0F
0A5E:  MOVLB  0
0A60:  RCALL  026C
0A62:  DECFSZ 4E,F
0A64:  BRA    0A58
....................    printf(lcd_putc, "2.."); 
0A66:  MOVLW  32
0A68:  MOVWF  FF6
0A6A:  MOVLW  01
0A6C:  MOVWF  FF7
0A6E:  RCALL  04F2
....................    delay_ms(1000); 
0A70:  MOVLW  04
0A72:  MOVWF  4E
0A74:  MOVLW  FA
0A76:  MOVLB  2
0A78:  MOVWF  x0F
0A7A:  MOVLB  0
0A7C:  CALL   026C
0A80:  DECFSZ 4E,F
0A82:  BRA    0A74
....................    printf(lcd_putc, "1.."); 
0A84:  MOVLW  36
0A86:  MOVWF  FF6
0A88:  MOVLW  01
0A8A:  MOVWF  FF7
0A8C:  RCALL  04F2
....................    delay_ms(1000); 
0A8E:  MOVLW  04
0A90:  MOVWF  4E
0A92:  MOVLW  FA
0A94:  MOVLB  2
0A96:  MOVWF  x0F
0A98:  MOVLB  0
0A9A:  CALL   026C
0A9E:  DECFSZ 4E,F
0AA0:  BRA    0A92
....................    lcd_gotoxy(1,1); 
0AA2:  MOVLW  01
0AA4:  MOVLB  2
0AA6:  MOVWF  x0F
0AA8:  MOVWF  x10
0AAA:  MOVLB  0
0AAC:  RCALL  0460
....................    printf(lcd_putc, "\f"); 
0AAE:  MOVLW  0C
0AB0:  MOVLB  2
0AB2:  MOVWF  x0E
0AB4:  MOVLB  0
0AB6:  RCALL  0486
....................    printf(lcd_putc, "      VAI!!"); 
0AB8:  MOVLW  3A
0ABA:  MOVWF  FF6
0ABC:  MOVLW  01
0ABE:  MOVWF  FF7
0AC0:  RCALL  04F2
0AC2:  GOTO   2658 (RETURN)
....................   
.................... } 
....................  
....................  
.................... int tocar_musica(int index){ 
*
1BA2:  CLRF   xEC
....................    int8 notas[200] = {DO_3, RE_3, MI_3, FA_3, FA_3, FA_3,      DO_3, RE_3, DO_3, RE_3, RE_3, RE_3,       RE_3, SOL_3, FA_3, MI_3, MI_3,MI_3,     DO_3, RE_3, MI_3, FA_3,   PAUSA,    DO_3, RE_3, MI_3, FA_3, FA_3, FA_3,      DO_3, RE_3, DO_3, RE_3, RE_3, RE_3,       RE_3, SOL_3, FA_3, MI_3, MI_3,MI_3,     DO_3, RE_3, MI_3, FA_3, 
....................                       DO_3, RE_3,    MI_3, SOL_3, SOL_3, MI_3,    FA_3, FA_3, DO_3, RE_3,     MI_3, SOL_3, SOL_3, FA_3,     MI_3, DO_3,DO_3,RE_3,      MI_3,SOL_3,   PAUSA    ,SOL_3,FA_3,MI_3,     DO_3,FA_3,   PAUSA    ,FA_3,MI_3,RE_3,     RE_3,MI_3,RE_3,RE_3,DO_3,DO_3,      SI_3,SOL_3,LA_3,SOL_3,MI_3,FA_3,RE_3,MI_3,RE_3,MI_3,DO_3,RE_3,DO_3,LA_3,DO_3,DO_3,          
....................                       MI_3,PAUSA, FA_3, SOL_3, DO_4,PAUSA,RE_3,PAUSA,MI_3,       FA_3,PAUSA,SOL_3,PAUSA, LA_3,        SI_3, MI_3,PAUSA,LA_3,PAUSA, SI_3, DO_3,          RE_3, MI_3,PAUSA,MI_3,PAUSA, FA_3, SOL_3, DO_4,       PAUSA,RE_3,PAUSA, MI_3, FA_3,PAUSA,     SOL_3,PAUSA, SOL_3,MI_3,RE_3,PAUSA,SOL_3,MI_3,       RE_3,PAUSA,SOL_3,MI_3,RE_3,PAUSA,SOL_3,MI_3,     RE_3,           
....................                       MI_3, MI_3, FA_3, SOL_3, SOL_3, FA_3, MI_3, RE_3,    DO_3, DO_3, RE_3, MI_3, MI_3,    PAUSA,   RE_3, RE_3,       MI_3, MI_3, FA_3, SOL_3, SOL_3, FA_3, MI_3, RE_3,    DO_3, DO_3, RE_3, MI_3, RE_3,    PAUSA,   DO_3, DO_3,     RE_3,    PAUSA,     MI_3, DO_3, RE_3, MI_3, FA_3, MI_3, DO_3,     RE_3, MI_3, FA_3, MI_3, RE_3, DO_3, RE_3, SI_3   
....................                         
....................                        }; 
*
16A6:  MOVLW  FE
16A8:  MOVWF  50
16AA:  MOVLW  FD
16AC:  MOVWF  51
16AE:  MOVLW  FB
16B0:  MOVWF  52
16B2:  MOVLW  F7
16B4:  MOVWF  53
16B6:  MOVWF  54
16B8:  MOVWF  55
16BA:  MOVLW  FE
16BC:  MOVWF  56
16BE:  MOVLW  FD
16C0:  MOVWF  57
16C2:  MOVLW  FE
16C4:  MOVWF  58
16C6:  MOVLW  FD
16C8:  MOVWF  59
16CA:  MOVWF  5A
16CC:  MOVWF  5B
16CE:  MOVWF  5C
16D0:  MOVLW  EF
16D2:  MOVWF  5D
16D4:  MOVLW  F7
16D6:  MOVWF  5E
16D8:  MOVLW  FB
16DA:  MOVWF  5F
16DC:  MOVWF  x60
16DE:  MOVWF  x61
16E0:  MOVLW  FE
16E2:  MOVWF  x62
16E4:  MOVLW  FD
16E6:  MOVWF  x63
16E8:  MOVLW  FB
16EA:  MOVWF  x64
16EC:  MOVLW  F7
16EE:  MOVWF  x65
16F0:  SETF   x66
16F2:  MOVLW  FE
16F4:  MOVWF  x67
16F6:  MOVLW  FD
16F8:  MOVWF  x68
16FA:  MOVLW  FB
16FC:  MOVWF  x69
16FE:  MOVLW  F7
1700:  MOVWF  x6A
1702:  MOVWF  x6B
1704:  MOVWF  x6C
1706:  MOVLW  FE
1708:  MOVWF  x6D
170A:  MOVLW  FD
170C:  MOVWF  x6E
170E:  MOVLW  FE
1710:  MOVWF  x6F
1712:  MOVLW  FD
1714:  MOVWF  x70
1716:  MOVWF  x71
1718:  MOVWF  x72
171A:  MOVWF  x73
171C:  MOVLW  EF
171E:  MOVWF  x74
1720:  MOVLW  F7
1722:  MOVWF  x75
1724:  MOVLW  FB
1726:  MOVWF  x76
1728:  MOVWF  x77
172A:  MOVWF  x78
172C:  MOVLW  FE
172E:  MOVWF  x79
1730:  MOVLW  FD
1732:  MOVWF  x7A
1734:  MOVLW  FB
1736:  MOVWF  x7B
1738:  MOVLW  F7
173A:  MOVWF  x7C
173C:  MOVLW  FE
173E:  MOVWF  x7D
1740:  MOVLW  FD
1742:  MOVWF  x7E
1744:  MOVLW  FB
1746:  MOVWF  x7F
1748:  MOVLW  EF
174A:  MOVWF  x80
174C:  MOVWF  x81
174E:  MOVLW  FB
1750:  MOVWF  x82
1752:  MOVLW  F7
1754:  MOVWF  x83
1756:  MOVWF  x84
1758:  MOVLW  FE
175A:  MOVWF  x85
175C:  MOVLW  FD
175E:  MOVWF  x86
1760:  MOVLW  FB
1762:  MOVWF  x87
1764:  MOVLW  EF
1766:  MOVWF  x88
1768:  MOVWF  x89
176A:  MOVLW  F7
176C:  MOVWF  x8A
176E:  MOVLW  FB
1770:  MOVWF  x8B
1772:  MOVLW  FE
1774:  MOVWF  x8C
1776:  MOVWF  x8D
1778:  MOVLW  FD
177A:  MOVWF  x8E
177C:  MOVLW  FB
177E:  MOVWF  x8F
1780:  MOVLW  EF
1782:  MOVWF  x90
1784:  SETF   x91
1786:  MOVWF  x92
1788:  MOVLW  F7
178A:  MOVWF  x93
178C:  MOVLW  FB
178E:  MOVWF  x94
1790:  MOVLW  FE
1792:  MOVWF  x95
1794:  MOVLW  F7
1796:  MOVWF  x96
1798:  SETF   x97
179A:  MOVWF  x98
179C:  MOVLW  FB
179E:  MOVWF  x99
17A0:  MOVLW  FD
17A2:  MOVWF  x9A
17A4:  MOVWF  x9B
17A6:  MOVLW  FB
17A8:  MOVWF  x9C
17AA:  MOVLW  FD
17AC:  MOVWF  x9D
17AE:  MOVWF  x9E
17B0:  MOVLW  FE
17B2:  MOVWF  x9F
17B4:  MOVWF  xA0
17B6:  MOVLW  BF
17B8:  MOVWF  xA1
17BA:  MOVLW  EF
17BC:  MOVWF  xA2
17BE:  MOVLW  DF
17C0:  MOVWF  xA3
17C2:  MOVLW  EF
17C4:  MOVWF  xA4
17C6:  MOVLW  FB
17C8:  MOVWF  xA5
17CA:  MOVLW  F7
17CC:  MOVWF  xA6
17CE:  MOVLW  FD
17D0:  MOVWF  xA7
17D2:  MOVLW  FB
17D4:  MOVWF  xA8
17D6:  MOVLW  FD
17D8:  MOVWF  xA9
17DA:  MOVLW  FB
17DC:  MOVWF  xAA
17DE:  MOVLW  FE
17E0:  MOVWF  xAB
17E2:  MOVLW  FD
17E4:  MOVWF  xAC
17E6:  MOVLW  FE
17E8:  MOVWF  xAD
17EA:  MOVLW  DF
17EC:  MOVWF  xAE
17EE:  MOVLW  FE
17F0:  MOVWF  xAF
17F2:  MOVWF  xB0
17F4:  MOVLW  FB
17F6:  MOVWF  xB1
17F8:  SETF   xB2
17FA:  MOVLW  F7
17FC:  MOVWF  xB3
17FE:  MOVLW  EF
1800:  MOVWF  xB4
1802:  MOVLW  7F
1804:  MOVWF  xB5
1806:  SETF   xB6
1808:  MOVLW  FD
180A:  MOVWF  xB7
180C:  SETF   xB8
180E:  MOVLW  FB
1810:  MOVWF  xB9
1812:  MOVLW  F7
1814:  MOVWF  xBA
1816:  SETF   xBB
1818:  MOVLW  EF
181A:  MOVWF  xBC
181C:  SETF   xBD
181E:  MOVLW  DF
1820:  MOVWF  xBE
1822:  MOVLW  BF
1824:  MOVWF  xBF
1826:  MOVLW  FB
1828:  MOVWF  xC0
182A:  SETF   xC1
182C:  MOVLW  DF
182E:  MOVWF  xC2
1830:  SETF   xC3
1832:  MOVLW  BF
1834:  MOVWF  xC4
1836:  MOVLW  FE
1838:  MOVWF  xC5
183A:  MOVLW  FD
183C:  MOVWF  xC6
183E:  MOVLW  FB
1840:  MOVWF  xC7
1842:  SETF   xC8
1844:  MOVWF  xC9
1846:  SETF   xCA
1848:  MOVLW  F7
184A:  MOVWF  xCB
184C:  MOVLW  EF
184E:  MOVWF  xCC
1850:  MOVLW  7F
1852:  MOVWF  xCD
1854:  SETF   xCE
1856:  MOVLW  FD
1858:  MOVWF  xCF
185A:  SETF   xD0
185C:  MOVLW  FB
185E:  MOVWF  xD1
1860:  MOVLW  F7
1862:  MOVWF  xD2
1864:  SETF   xD3
1866:  MOVLW  EF
1868:  MOVWF  xD4
186A:  SETF   xD5
186C:  MOVWF  xD6
186E:  MOVLW  FB
1870:  MOVWF  xD7
1872:  MOVLW  FD
1874:  MOVWF  xD8
1876:  SETF   xD9
1878:  MOVLW  EF
187A:  MOVWF  xDA
187C:  MOVLW  FB
187E:  MOVWF  xDB
1880:  MOVLW  FD
1882:  MOVWF  xDC
1884:  SETF   xDD
1886:  MOVLW  EF
1888:  MOVWF  xDE
188A:  MOVLW  FB
188C:  MOVWF  xDF
188E:  MOVLW  FD
1890:  MOVWF  xE0
1892:  SETF   xE1
1894:  MOVLW  EF
1896:  MOVWF  xE2
1898:  MOVLW  FB
189A:  MOVWF  xE3
189C:  MOVLW  FD
189E:  MOVWF  xE4
18A0:  MOVLW  FB
18A2:  MOVWF  xE5
18A4:  MOVWF  xE6
18A6:  MOVLW  F7
18A8:  MOVWF  xE7
18AA:  MOVLW  EF
18AC:  MOVWF  xE8
18AE:  MOVWF  xE9
18B0:  MOVLW  F7
18B2:  MOVWF  xEA
18B4:  MOVLW  FB
18B6:  MOVWF  xEB
18B8:  MOVLW  FD
18BA:  MOVWF  xEC
18BC:  MOVLW  FE
18BE:  MOVWF  xED
18C0:  MOVWF  xEE
18C2:  MOVLW  FD
18C4:  MOVWF  xEF
18C6:  MOVLW  FB
18C8:  MOVWF  xF0
18CA:  MOVWF  xF1
18CC:  SETF   xF2
18CE:  MOVLW  FD
18D0:  MOVWF  xF3
18D2:  MOVWF  xF4
18D4:  MOVLW  FB
18D6:  MOVWF  xF5
18D8:  MOVWF  xF6
18DA:  MOVLW  F7
18DC:  MOVWF  xF7
18DE:  MOVLW  EF
18E0:  MOVWF  xF8
18E2:  MOVWF  xF9
18E4:  MOVLW  F7
18E6:  MOVWF  xFA
18E8:  MOVLW  FB
18EA:  MOVWF  xFB
18EC:  MOVLW  FD
18EE:  MOVWF  xFC
18F0:  MOVLW  FE
18F2:  MOVWF  xFD
18F4:  MOVWF  xFE
18F6:  MOVLW  FD
18F8:  MOVWF  xFF
18FA:  MOVLW  FB
18FC:  MOVLB  1
18FE:  MOVWF  x00
1900:  MOVLW  FD
1902:  MOVWF  x01
1904:  SETF   x02
1906:  MOVLW  FE
1908:  MOVWF  x03
190A:  MOVWF  x04
190C:  MOVLW  FD
190E:  MOVWF  x05
1910:  SETF   x06
1912:  MOVLW  FB
1914:  MOVWF  x07
1916:  MOVLW  FE
1918:  MOVWF  x08
191A:  MOVLW  FD
191C:  MOVWF  x09
191E:  MOVLW  FB
1920:  MOVWF  x0A
1922:  MOVLW  F7
1924:  MOVWF  x0B
1926:  MOVLW  FB
1928:  MOVWF  x0C
192A:  MOVLW  FE
192C:  MOVWF  x0D
192E:  MOVLW  FD
1930:  MOVWF  x0E
1932:  MOVLW  FB
1934:  MOVWF  x0F
1936:  MOVLW  F7
1938:  MOVWF  x10
193A:  MOVLW  FB
193C:  MOVWF  x11
193E:  MOVLW  FD
1940:  MOVWF  x12
1942:  MOVLW  FE
1944:  MOVWF  x13
1946:  MOVLW  FD
1948:  MOVWF  x14
194A:  MOVLW  BF
194C:  MOVWF  x15
194E:  CLRF   x16
1950:  CLRF   x17
....................    int8 duracao[200] ={8,8,8,4,8,4,8,8,8,4,8,4,8,8,8,4,8,4,8,8,8,4,  4,   8,8,8,4,8,4,8,8,8,4,8,4,8,8,8,4,8,4,8,8,8,4, 
....................                        8,8,   4,4,4,4,    4,2,8,8,    4,4,4,4,    2,8,8,8,    4,4,  8,  8,8,8,       4,4,   8  ,8,8,8,      4,4,8,8,8,4     8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 
....................                        8,16,16,8,4,8,8,16,16,     2,4,8,16,16,    8,4,8,8,16,16,4,    4,16,8,8,16,16,8,4,   8,8,16,16,4,4,    8,16,16,4,8,16,16,4,    8,16,16,4,8,16,16,4,    8, 
....................                        8,8,8,8,8,8,8,8     8,8,8,8,8,    16,    16,4       8,8,8,8,8,8,8,8     8,8,8,8,8,    16,    16,4      8,    8,     8,8,8,16,16,8,8,      8,16,16,8,8,8,8,4 
....................                       }; 
1952:  MOVLW  08
1954:  MOVWF  x18
1956:  MOVWF  x19
1958:  MOVWF  x1A
195A:  MOVLW  04
195C:  MOVWF  x1B
195E:  MOVLW  08
1960:  MOVWF  x1C
1962:  MOVLW  04
1964:  MOVWF  x1D
1966:  MOVLW  08
1968:  MOVWF  x1E
196A:  MOVWF  x1F
196C:  MOVWF  x20
196E:  MOVLW  04
1970:  MOVWF  x21
1972:  MOVLW  08
1974:  MOVWF  x22
1976:  MOVLW  04
1978:  MOVWF  x23
197A:  MOVLW  08
197C:  MOVWF  x24
197E:  MOVWF  x25
1980:  MOVWF  x26
1982:  MOVLW  04
1984:  MOVWF  x27
1986:  MOVLW  08
1988:  MOVWF  x28
198A:  MOVLW  04
198C:  MOVWF  x29
198E:  MOVLW  08
1990:  MOVWF  x2A
1992:  MOVWF  x2B
1994:  MOVWF  x2C
1996:  MOVLW  04
1998:  MOVWF  x2D
199A:  MOVWF  x2E
199C:  MOVLW  08
199E:  MOVWF  x2F
19A0:  MOVWF  x30
19A2:  MOVWF  x31
19A4:  MOVLW  04
19A6:  MOVWF  x32
19A8:  MOVLW  08
19AA:  MOVWF  x33
19AC:  MOVLW  04
19AE:  MOVWF  x34
19B0:  MOVLW  08
19B2:  MOVWF  x35
19B4:  MOVWF  x36
19B6:  MOVWF  x37
19B8:  MOVLW  04
19BA:  MOVWF  x38
19BC:  MOVLW  08
19BE:  MOVWF  x39
19C0:  MOVLW  04
19C2:  MOVWF  x3A
19C4:  MOVLW  08
19C6:  MOVWF  x3B
19C8:  MOVWF  x3C
19CA:  MOVWF  x3D
19CC:  MOVLW  04
19CE:  MOVWF  x3E
19D0:  MOVLW  08
19D2:  MOVWF  x3F
19D4:  MOVLW  04
19D6:  MOVWF  x40
19D8:  MOVLW  08
19DA:  MOVWF  x41
19DC:  MOVWF  x42
19DE:  MOVWF  x43
19E0:  MOVLW  04
19E2:  MOVWF  x44
19E4:  MOVLW  08
19E6:  MOVWF  x45
19E8:  MOVWF  x46
19EA:  MOVLW  04
19EC:  MOVWF  x47
19EE:  MOVWF  x48
19F0:  MOVWF  x49
19F2:  MOVWF  x4A
19F4:  MOVWF  x4B
19F6:  MOVLW  02
19F8:  MOVWF  x4C
19FA:  MOVLW  08
19FC:  MOVWF  x4D
19FE:  MOVWF  x4E
1A00:  MOVLW  04
1A02:  MOVWF  x4F
1A04:  MOVWF  x50
1A06:  MOVWF  x51
1A08:  MOVWF  x52
1A0A:  MOVLW  02
1A0C:  MOVWF  x53
1A0E:  MOVLW  08
1A10:  MOVWF  x54
1A12:  MOVWF  x55
1A14:  MOVWF  x56
1A16:  MOVLW  04
1A18:  MOVWF  x57
1A1A:  MOVWF  x58
1A1C:  MOVLW  08
1A1E:  MOVWF  x59
1A20:  MOVWF  x5A
1A22:  MOVWF  x5B
1A24:  MOVWF  x5C
1A26:  MOVLW  04
1A28:  MOVWF  x5D
1A2A:  MOVWF  x5E
1A2C:  MOVLW  08
1A2E:  MOVWF  x5F
1A30:  MOVWF  x60
1A32:  MOVWF  x61
1A34:  MOVWF  x62
1A36:  MOVLW  04
1A38:  MOVWF  x63
1A3A:  MOVWF  x64
1A3C:  MOVLW  08
1A3E:  MOVWF  x65
1A40:  MOVWF  x66
1A42:  MOVWF  x67
1A44:  MOVLW  04
1A46:  MOVWF  x68
1A48:  MOVLW  08
1A4A:  MOVWF  x69
1A4C:  MOVWF  x6A
1A4E:  MOVWF  x6B
1A50:  MOVWF  x6C
1A52:  MOVWF  x6D
1A54:  MOVWF  x6E
1A56:  MOVWF  x6F
1A58:  MOVWF  x70
1A5A:  MOVWF  x71
1A5C:  MOVWF  x72
1A5E:  MOVWF  x73
1A60:  MOVWF  x74
1A62:  MOVWF  x75
1A64:  MOVWF  x76
1A66:  MOVWF  x77
1A68:  MOVWF  x78
1A6A:  MOVWF  x79
1A6C:  MOVLW  10
1A6E:  MOVWF  x7A
1A70:  MOVWF  x7B
1A72:  MOVLW  08
1A74:  MOVWF  x7C
1A76:  MOVLW  04
1A78:  MOVWF  x7D
1A7A:  MOVLW  08
1A7C:  MOVWF  x7E
1A7E:  MOVWF  x7F
1A80:  MOVLW  10
1A82:  MOVWF  x80
1A84:  MOVWF  x81
1A86:  MOVLW  02
1A88:  MOVWF  x82
1A8A:  MOVLW  04
1A8C:  MOVWF  x83
1A8E:  MOVLW  08
1A90:  MOVWF  x84
1A92:  MOVLW  10
1A94:  MOVWF  x85
1A96:  MOVWF  x86
1A98:  MOVLW  08
1A9A:  MOVWF  x87
1A9C:  MOVLW  04
1A9E:  MOVWF  x88
1AA0:  MOVLW  08
1AA2:  MOVWF  x89
1AA4:  MOVWF  x8A
1AA6:  MOVLW  10
1AA8:  MOVWF  x8B
1AAA:  MOVWF  x8C
1AAC:  MOVLW  04
1AAE:  MOVWF  x8D
1AB0:  MOVWF  x8E
1AB2:  MOVLW  10
1AB4:  MOVWF  x8F
1AB6:  MOVLW  08
1AB8:  MOVWF  x90
1ABA:  MOVWF  x91
1ABC:  MOVLW  10
1ABE:  MOVWF  x92
1AC0:  MOVWF  x93
1AC2:  MOVLW  08
1AC4:  MOVWF  x94
1AC6:  MOVLW  04
1AC8:  MOVWF  x95
1ACA:  MOVLW  08
1ACC:  MOVWF  x96
1ACE:  MOVWF  x97
1AD0:  MOVLW  10
1AD2:  MOVWF  x98
1AD4:  MOVWF  x99
1AD6:  MOVLW  04
1AD8:  MOVWF  x9A
1ADA:  MOVWF  x9B
1ADC:  MOVLW  08
1ADE:  MOVWF  x9C
1AE0:  MOVLW  10
1AE2:  MOVWF  x9D
1AE4:  MOVWF  x9E
1AE6:  MOVLW  04
1AE8:  MOVWF  x9F
1AEA:  MOVLW  08
1AEC:  MOVWF  xA0
1AEE:  MOVLW  10
1AF0:  MOVWF  xA1
1AF2:  MOVWF  xA2
1AF4:  MOVLW  04
1AF6:  MOVWF  xA3
1AF8:  MOVLW  08
1AFA:  MOVWF  xA4
1AFC:  MOVLW  10
1AFE:  MOVWF  xA5
1B00:  MOVWF  xA6
1B02:  MOVLW  04
1B04:  MOVWF  xA7
1B06:  MOVLW  08
1B08:  MOVWF  xA8
1B0A:  MOVLW  10
1B0C:  MOVWF  xA9
1B0E:  MOVWF  xAA
1B10:  MOVLW  04
1B12:  MOVWF  xAB
1B14:  MOVLW  08
1B16:  MOVWF  xAC
1B18:  MOVWF  xAD
1B1A:  MOVWF  xAE
1B1C:  MOVWF  xAF
1B1E:  MOVWF  xB0
1B20:  MOVWF  xB1
1B22:  MOVWF  xB2
1B24:  MOVWF  xB3
1B26:  MOVWF  xB4
1B28:  MOVWF  xB5
1B2A:  MOVWF  xB6
1B2C:  MOVWF  xB7
1B2E:  MOVWF  xB8
1B30:  MOVWF  xB9
1B32:  MOVLW  10
1B34:  MOVWF  xBA
1B36:  MOVWF  xBB
1B38:  MOVLW  04
1B3A:  MOVWF  xBC
1B3C:  MOVLW  08
1B3E:  MOVWF  xBD
1B40:  MOVWF  xBE
1B42:  MOVWF  xBF
1B44:  MOVWF  xC0
1B46:  MOVWF  xC1
1B48:  MOVWF  xC2
1B4A:  MOVWF  xC3
1B4C:  MOVWF  xC4
1B4E:  MOVWF  xC5
1B50:  MOVWF  xC6
1B52:  MOVWF  xC7
1B54:  MOVWF  xC8
1B56:  MOVWF  xC9
1B58:  MOVLW  10
1B5A:  MOVWF  xCA
1B5C:  MOVWF  xCB
1B5E:  MOVLW  04
1B60:  MOVWF  xCC
1B62:  MOVLW  08
1B64:  MOVWF  xCD
1B66:  MOVWF  xCE
1B68:  MOVWF  xCF
1B6A:  MOVWF  xD0
1B6C:  MOVWF  xD1
1B6E:  MOVLW  10
1B70:  MOVWF  xD2
1B72:  MOVWF  xD3
1B74:  MOVLW  08
1B76:  MOVWF  xD4
1B78:  MOVWF  xD5
1B7A:  MOVWF  xD6
1B7C:  MOVLW  10
1B7E:  MOVWF  xD7
1B80:  MOVWF  xD8
1B82:  MOVLW  08
1B84:  MOVWF  xD9
1B86:  MOVWF  xDA
1B88:  MOVWF  xDB
1B8A:  MOVWF  xDC
1B8C:  MOVLW  04
1B8E:  MOVWF  xDD
1B90:  CLRF   xDE
1B92:  CLRF   xDF
....................    int8 quant_Notas[4] = {45,52,52,47}; 
1B94:  MOVLW  2D
1B96:  MOVWF  xE0
1B98:  MOVLW  34
1B9A:  MOVWF  xE1
1B9C:  MOVWF  xE2
1B9E:  MOVLW  2F
1BA0:  MOVWF  xE3
....................     
....................    int16 index_inicio[QUANT_MUSICAS]; 
....................    int i = 0; 
....................    index_inicio[0] = 0; 
*
1BA4:  CLRF   xE5
1BA6:  CLRF   xE4
....................    int16 acum = 0; 
1BA8:  CLRF   xEE
1BAA:  CLRF   xED
....................     
....................    for(i = 1;i<QUANT_MUSICAS;i++){ 
1BAC:  MOVLW  01
1BAE:  MOVWF  xEC
1BB0:  MOVF   xEC,W
1BB2:  SUBLW  03
1BB4:  BNC   1BFC
....................       int8 j=i; 
1BB6:  MOVFF  1EC,1EF
....................       while(j>0){ 
1BBA:  MOVF   xEF,F
1BBC:  BZ    1BDA
....................          acum += quant_Notas[j-1]; 
1BBE:  MOVLW  01
1BC0:  SUBWF  xEF,W
1BC2:  CLRF   03
1BC4:  ADDLW  E0
1BC6:  MOVWF  FE9
1BC8:  MOVLW  01
1BCA:  ADDWFC 03,W
1BCC:  MOVWF  FEA
1BCE:  MOVF   FEF,W
1BD0:  ADDWF  xED,F
1BD2:  MOVLW  00
1BD4:  ADDWFC xEE,F
....................          j--; 
1BD6:  DECF   xEF,F
1BD8:  BRA    1BBA
....................       } 
....................       index_inicio[i] = acum; 
1BDA:  BCF    FD8.0
1BDC:  RLCF   xEC,W
1BDE:  CLRF   03
1BE0:  ADDLW  E4
1BE2:  MOVWF  FE9
1BE4:  MOVLW  01
1BE6:  ADDWFC 03,W
1BE8:  MOVWF  FEA
1BEA:  MOVFF  1EE,FEC
1BEE:  MOVF   FED,F
1BF0:  MOVFF  1ED,FEF
....................       acum = 0; 
1BF4:  CLRF   xEE
1BF6:  CLRF   xED
1BF8:  INCF   xEC,F
1BFA:  BRA    1BB0
....................    } 
....................     
....................    i=0; 
1BFC:  CLRF   xEC
....................     
....................    int16 acertos = 0; 
....................    int16 tempo_musica =  (60000/sound[index].tempo)*4; 
1BFE:  CLRF   xF1
1C00:  CLRF   xF0
1C02:  MOVF   4F,W
1C04:  MULLW  11
1C06:  MOVF   FF3,W
1C08:  CLRF   xFF
1C0A:  MOVWF  xFE
1C0C:  MOVLW  10
1C0E:  ADDWF  xFE,W
1C10:  MOVWF  01
1C12:  MOVLW  00
1C14:  ADDWFC xFF,W
1C16:  MOVWF  03
1C18:  MOVF   01,W
1C1A:  ADDLW  04
1C1C:  MOVWF  FE9
1C1E:  MOVLW  00
1C20:  ADDWFC 03,W
1C22:  MOVWF  FEA
1C24:  MOVFF  FEF,1FE
1C28:  MOVLW  EA
1C2A:  MOVLB  2
1C2C:  MOVWF  x02
1C2E:  MOVLW  60
1C30:  MOVWF  x01
1C32:  CLRF   x04
1C34:  MOVFF  1FE,203
1C38:  MOVLB  0
1C3A:  CALL   0AC6
1C3E:  MOVLB  1
1C40:  RLCF   01,W
1C42:  MOVWF  xF2
1C44:  RLCF   02,W
1C46:  MOVWF  xF3
1C48:  RLCF   xF2,F
1C4A:  RLCF   xF3,F
1C4C:  MOVLW  FC
1C4E:  ANDWF  xF2,F
....................     
....................    while(i<quant_Notas[index]){ 
1C50:  CLRF   03
1C52:  MOVF   4F,W
1C54:  ADDLW  E0
1C56:  MOVWF  FE9
1C58:  MOVLW  01
1C5A:  ADDWFC 03,W
1C5C:  MOVWF  FEA
1C5E:  MOVF   FEF,W
1C60:  SUBWF  xEC,W
1C62:  BTFSC  FD8.0
1C64:  BRA    1E00
....................       int8 acertosNota = 0; 
1C66:  CLRF   xF4
....................       // MOSTRA A NOTA A SER TOCADA REPRESENTADA PELO RESPECTIVO LED PARA O USUÁRIO 
....................       notesToLeds(notas[index_inicio[index]+i]); 
1C68:  BCF    FD8.0
1C6A:  RLCF   4F,W
1C6C:  CLRF   03
1C6E:  ADDLW  E4
1C70:  MOVWF  FE9
1C72:  MOVLW  01
1C74:  ADDWFC 03,W
1C76:  MOVWF  FEA
1C78:  MOVFF  FEC,1FF
1C7C:  MOVF   FED,F
1C7E:  MOVFF  FEF,1FE
1C82:  MOVF   xEC,W
1C84:  ADDWF  xFE,F
1C86:  MOVLW  00
1C88:  ADDWFC xFF,F
1C8A:  MOVLW  50
1C8C:  ADDWF  xFE,W
1C8E:  MOVWF  FE9
1C90:  MOVLW  00
1C92:  ADDWFC xFF,W
1C94:  MOVWF  FEA
1C96:  MOVFF  FEF,200
1C9A:  MOVFF  200,201
1C9E:  MOVLB  0
1CA0:  CALL   08EE
....................       int16 duracao_nota = (int16) (tempo_musica/duracao[index_inicio[index]+i]); 
1CA4:  BCF    FD8.0
1CA6:  RLCF   4F,W
1CA8:  CLRF   03
1CAA:  ADDLW  E4
1CAC:  MOVWF  FE9
1CAE:  MOVLW  01
1CB0:  ADDWFC 03,W
1CB2:  MOVWF  FEA
1CB4:  MOVFF  FEC,1FF
1CB8:  MOVF   FED,F
1CBA:  MOVFF  FEF,1FE
1CBE:  MOVLB  1
1CC0:  MOVF   xEC,W
1CC2:  ADDWF  xFE,F
1CC4:  MOVLW  00
1CC6:  ADDWFC xFF,F
1CC8:  MOVLW  18
1CCA:  ADDWF  xFE,W
1CCC:  MOVWF  FE9
1CCE:  MOVLW  01
1CD0:  ADDWFC xFF,W
1CD2:  MOVWF  FEA
1CD4:  MOVFF  FEF,200
1CD8:  MOVLB  2
1CDA:  MOVFF  1F3,202
1CDE:  MOVFF  1F2,201
1CE2:  CLRF   x04
1CE4:  MOVFF  200,203
1CE8:  MOVLB  0
1CEA:  CALL   0AC6
1CEE:  MOVFF  02,1F6
1CF2:  MOVFF  01,1F5
....................     
....................       for(int j = 0; j<20;j++){ 
1CF6:  MOVLB  1
1CF8:  CLRF   xF7
1CFA:  MOVF   xF7,W
1CFC:  SUBLW  13
1CFE:  BTFSS  FD8.0
1D00:  BRA    1DF4
....................        
....................          int8 nota_Press_User = input_b(); 
1D02:  SETF   F93
1D04:  MOVFF  F81,1F8
....................          if(j>4 && j<10){ 
1D08:  MOVF   xF7,W
1D0A:  SUBLW  04
1D0C:  BC    1D4A
1D0E:  MOVF   xF7,W
1D10:  SUBLW  09
1D12:  BNC   1D4A
....................             if(nota_Press_User == notas[index_inicio[index]+i]){   //SE ACERTOU 
1D14:  BCF    FD8.0
1D16:  RLCF   4F,W
1D18:  CLRF   03
1D1A:  ADDLW  E4
1D1C:  MOVWF  FE9
1D1E:  MOVLW  01
1D20:  ADDWFC 03,W
1D22:  MOVWF  FEA
1D24:  MOVFF  FEC,1FF
1D28:  MOVF   FED,F
1D2A:  MOVFF  FEF,1FE
1D2E:  MOVF   xEC,W
1D30:  ADDWF  xFE,F
1D32:  MOVLW  00
1D34:  ADDWFC xFF,F
1D36:  MOVLW  50
1D38:  ADDWF  xFE,W
1D3A:  MOVWF  FE9
1D3C:  MOVLW  00
1D3E:  ADDWFC xFF,W
1D40:  MOVWF  FEA
1D42:  MOVF   FEF,W
1D44:  SUBWF  xF8,W
1D46:  BNZ   1D4A
....................             acertosNota++; 
1D48:  INCF   xF4,F
....................             } 
....................          } 
....................           
....................  
....................          delay_ms((int16)(duracao_nota/20)); 
1D4A:  MOVFF  1F6,202
1D4E:  MOVFF  1F5,201
1D52:  MOVLB  2
1D54:  CLRF   x04
1D56:  MOVLW  14
1D58:  MOVWF  x03
1D5A:  MOVLB  0
1D5C:  CALL   0AC6
1D60:  MOVFF  02,1FF
1D64:  MOVFF  01,1FE
1D68:  MOVFF  02,200
1D6C:  MOVLB  2
1D6E:  INCF   x00,F
1D70:  DECF   x00,F
1D72:  BTFSC  FD8.2
1D74:  BRA    1D82
1D76:  SETF   x0F
1D78:  MOVLB  0
1D7A:  CALL   026C
1D7E:  MOVLB  2
1D80:  BRA    1D70
1D82:  MOVFF  1FE,20F
1D86:  MOVLB  0
1D88:  CALL   026C
....................          if(j==10) { 
1D8C:  MOVLB  1
1D8E:  MOVF   xF7,W
1D90:  SUBLW  0A
1D92:  BNZ   1DF0
....................             apagarLeds(); 
1D94:  MOVLB  0
1D96:  CALL   08C8
....................             qualificarPrecisao(i, acertosNota); 
1D9A:  MOVFF  1EC,1FE
1D9E:  MOVFF  1F4,1FF
1DA2:  GOTO   0B0C
....................             lcd_gotoxy(1,2); 
1DA6:  MOVLW  01
1DA8:  MOVLB  2
1DAA:  MOVWF  x0F
1DAC:  MOVLW  02
1DAE:  MOVWF  x10
1DB0:  MOVLB  0
1DB2:  CALL   0460
....................             printf(lcd_putc, "NotaPress: %u    ",nota_Press_User); 
1DB6:  MOVLW  46
1DB8:  MOVWF  FF6
1DBA:  MOVLW  01
1DBC:  MOVWF  FF7
1DBE:  MOVLW  0B
1DC0:  MOVLB  2
1DC2:  MOVWF  x01
1DC4:  MOVLB  0
1DC6:  CALL   0C7A
1DCA:  MOVFF  1F8,20C
1DCE:  MOVLW  1B
1DD0:  MOVLB  2
1DD2:  MOVWF  x0D
1DD4:  MOVLB  0
1DD6:  CALL   05B4
1DDA:  MOVLW  53
1DDC:  MOVWF  FF6
1DDE:  MOVLW  01
1DE0:  MOVWF  FF7
1DE2:  MOVLW  04
1DE4:  MOVLB  2
1DE6:  MOVWF  x01
1DE8:  MOVLB  0
1DEA:  CALL   0C7A
1DEE:  MOVLB  1
....................          } 
1DF0:  INCF   xF7,F
1DF2:  BRA    1CFA
....................          /* 
....................          lcd_gotoxy(1,1); 
....................          printf(lcd_putc, "\f"); 
....................          printf(lcd_putc, "Nota_Press: %u", nota_Press_User); 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc, "Acertos: %lu", acertos); 
....................          */ 
....................       } 
....................       acertos+=acertosNota; 
1DF4:  MOVF   xF4,W
1DF6:  ADDWF  xF0,F
1DF8:  MOVLW  00
1DFA:  ADDWFC xF1,F
....................       i++; 
1DFC:  INCF   xEC,F
1DFE:  BRA    1C50
....................    } 
....................     
....................    float pontuacao = (acertos/5); 
1E00:  MOVFF  1F1,202
1E04:  MOVFF  1F0,201
1E08:  MOVLB  2
1E0A:  CLRF   x04
1E0C:  MOVLW  05
1E0E:  MOVWF  x03
1E10:  MOVLB  0
1E12:  CALL   0AC6
1E16:  MOVFF  02,217
1E1A:  MOVFF  01,216
1E1E:  MOVLB  0
1E20:  CALL   0CA4
1E24:  MOVFF  03,1FC
1E28:  MOVFF  02,1FB
1E2C:  MOVFF  01,1FA
1E30:  MOVFF  00,1F9
....................    lcd_gotoxy(1,1); 
1E34:  MOVLW  01
1E36:  MOVLB  2
1E38:  MOVWF  x0F
1E3A:  MOVWF  x10
1E3C:  MOVLB  0
1E3E:  CALL   0460
....................    printf(lcd_putc, "\fAcertos: %lu/%u",(int16) ceil(pontuacao),quant_Notas[index]); 
1E42:  MOVFF  1FC,201
1E46:  MOVFF  1FB,200
1E4A:  MOVFF  1FA,1FF
1E4E:  MOVFF  1F9,1FE
1E52:  CALL   144A
1E56:  MOVFF  03,215
1E5A:  MOVFF  02,214
1E5E:  MOVFF  01,213
1E62:  MOVFF  00,212
1E66:  CALL   0D54
1E6A:  MOVFF  02,1FF
1E6E:  MOVFF  01,1FE
1E72:  CLRF   03
1E74:  MOVF   4F,W
1E76:  ADDLW  E0
1E78:  MOVWF  FE9
1E7A:  MOVLW  01
1E7C:  ADDWFC 03,W
1E7E:  MOVWF  FEA
1E80:  MOVFF  FEF,200
1E84:  MOVLW  58
1E86:  MOVWF  FF6
1E88:  MOVLW  01
1E8A:  MOVWF  FF7
1E8C:  MOVLW  0A
1E8E:  MOVLB  2
1E90:  MOVWF  x01
1E92:  MOVLB  0
1E94:  CALL   0C7A
1E98:  MOVLW  10
1E9A:  MOVWF  FE9
1E9C:  MOVFF  1FF,202
1EA0:  MOVFF  1FE,201
1EA4:  GOTO   1466
1EA8:  MOVLW  2F
1EAA:  MOVLB  2
1EAC:  MOVWF  x0E
1EAE:  MOVLB  0
1EB0:  CALL   0486
1EB4:  MOVFF  200,20C
1EB8:  MOVLW  1B
1EBA:  MOVLB  2
1EBC:  MOVWF  x0D
1EBE:  MOVLB  0
1EC0:  CALL   05B4
....................    pontuacao /= quant_Notas[index]; 
1EC4:  CLRF   03
1EC6:  MOVF   4F,W
1EC8:  ADDLW  E0
1ECA:  MOVWF  FE9
1ECC:  MOVLW  01
1ECE:  ADDWFC 03,W
1ED0:  MOVWF  FEA
1ED2:  MOVF   FEF,W
1ED4:  MOVLB  2
1ED6:  CLRF   x17
1ED8:  MOVWF  x16
1EDA:  MOVLB  0
1EDC:  CALL   0CA4
1EE0:  MOVFF  1FC,201
1EE4:  MOVFF  1FB,200
1EE8:  MOVFF  1FA,1FF
1EEC:  MOVFF  1F9,1FE
1EF0:  MOVFF  03,205
1EF4:  MOVFF  02,204
1EF8:  MOVFF  01,203
1EFC:  MOVFF  00,202
1F00:  GOTO   1526
1F04:  MOVFF  03,1FC
1F08:  MOVFF  02,1FB
1F0C:  MOVFF  01,1FA
1F10:  MOVFF  00,1F9
....................    pontuacao *= 100; 
1F14:  MOVFF  1FC,215
1F18:  MOVFF  1FB,214
1F1C:  MOVFF  1FA,213
1F20:  MOVFF  1F9,212
1F24:  MOVLB  2
1F26:  CLRF   x19
1F28:  CLRF   x18
1F2A:  MOVLW  48
1F2C:  MOVWF  x17
1F2E:  MOVLW  85
1F30:  MOVWF  x16
1F32:  MOVLB  0
1F34:  CALL   0D90
1F38:  MOVFF  03,1FC
1F3C:  MOVFF  02,1FB
1F40:  MOVFF  01,1FA
1F44:  MOVFF  00,1F9
....................    pontuacao = ceil(pontuacao); 
1F48:  MOVFF  1FC,201
1F4C:  MOVFF  1FB,200
1F50:  MOVFF  1FA,1FF
1F54:  MOVFF  1F9,1FE
1F58:  CALL   144A
1F5C:  MOVFF  03,1FC
1F60:  MOVFF  02,1FB
1F64:  MOVFF  01,1FA
1F68:  MOVFF  00,1F9
....................     
....................    int8 pontuacao_Final = (int) pontuacao; 
1F6C:  MOVFF  1FC,215
1F70:  MOVFF  1FB,214
1F74:  MOVFF  1FA,213
1F78:  MOVFF  1F9,212
1F7C:  CALL   0D54
1F80:  MOVFF  01,1FD
....................    
....................    lcd_gotoxy(1,2); 
1F84:  MOVLW  01
1F86:  MOVLB  2
1F88:  MOVWF  x0F
1F8A:  MOVLW  02
1F8C:  MOVWF  x10
1F8E:  MOVLB  0
1F90:  CALL   0460
....................    printf(lcd_putc, "Perc.Total:  %u%%", pontuacao_Final); 
1F94:  MOVLW  6A
1F96:  MOVWF  FF6
1F98:  MOVLW  01
1F9A:  MOVWF  FF7
1F9C:  MOVLW  0D
1F9E:  MOVLB  2
1FA0:  MOVWF  x01
1FA2:  MOVLB  0
1FA4:  CALL   0C7A
1FA8:  MOVFF  1FD,20C
1FAC:  MOVLW  1B
1FAE:  MOVLB  2
1FB0:  MOVWF  x0D
1FB2:  MOVLB  0
1FB4:  CALL   05B4
1FB8:  MOVLW  25
1FBA:  MOVLB  2
1FBC:  MOVWF  x0E
1FBE:  MOVLB  0
1FC0:  CALL   0486
....................    delay_ms(8000); 
1FC4:  MOVLW  20
1FC6:  MOVLB  1
1FC8:  MOVWF  xFE
1FCA:  MOVLW  FA
1FCC:  MOVLB  2
1FCE:  MOVWF  x0F
1FD0:  MOVLB  0
1FD2:  CALL   026C
1FD6:  MOVLB  1
1FD8:  DECFSZ xFE,F
1FDA:  BRA    1FCA
....................    return pontuacao_Final; 
1FDC:  MOVFF  1FD,01
1FE0:  MOVLB  0
1FE2:  GOTO   2664 (RETURN)
....................    
.................... } 
....................  
.................... void salvar(int8 pontuacao,int8 index){ 
1FE6:  CLRF   51
1FE8:  CLRF   52
*
2012:  MOVLW  0A
2014:  MOVWF  x67
....................  
.................... //Verificar se pontuação atual é maior do que as anteriores 
....................    int8 address = 0x00; 
....................    int8 aux = 0; 
....................    int8 memoria[10] = {0,0,0,0,0,0,0,0,0,0};   
*
1FEA:  CLRF   53
1FEC:  CLRF   54
1FEE:  CLRF   55
1FF0:  CLRF   56
1FF2:  CLRF   57
1FF4:  CLRF   58
1FF6:  CLRF   59
1FF8:  CLRF   5A
1FFA:  CLRF   5B
1FFC:  CLRF   5C
....................    int8 memoria_index[10] = {0,0,0,0,0,0,0,0,0,0}; 
1FFE:  CLRF   5D
2000:  CLRF   5E
2002:  CLRF   5F
2004:  CLRF   x60
2006:  CLRF   x61
2008:  CLRF   x62
200A:  CLRF   x63
200C:  CLRF   x64
200E:  CLRF   x65
2010:  CLRF   x66
....................    int8 offset = 10; 
....................     
....................    /* MAPA DE MEMORIA DA EEPROM 
....................    0X00 - 0X09 --> PONTUAÇOES    
....................    0X0A - 0X13 --> INDEXADORES CORRESPONDENTES AS PONTUAÇOES   
....................    */ 
....................     
....................    for(address = 0x00; address<10;address++){ 
*
2016:  CLRF   51
2018:  MOVF   51,W
201A:  SUBLW  09
201C:  BTFSS  FD8.0
201E:  BRA    21FA
....................       aux = read_eeprom(address); 
2020:  MOVFF  FF2,6A
2024:  BCF    FF2.7
2026:  MOVFF  51,FA9
202A:  BCF    FA6.6
202C:  BCF    FA6.7
202E:  BSF    FA6.0
2030:  MOVF   FA8,W
2032:  BTFSC  x6A.7
2034:  BSF    FF2.7
2036:  MOVWF  52
....................       if(pontuacao>=aux){ 
2038:  MOVF   52,W
203A:  SUBWF  4F,W
203C:  BTFSS  FD8.0
203E:  BRA    21F6
....................          lcd_gotoxy(1,1); 
2040:  MOVLW  01
2042:  MOVLB  2
2044:  MOVWF  x0F
2046:  MOVWF  x10
2048:  MOVLB  0
204A:  CALL   0460
....................          printf(lcd_putc, "\fRECORD ATINGIDO!\n%u COLOCADO", address+1); 
204E:  MOVLW  01
2050:  ADDWF  51,W
2052:  MOVWF  x6A
2054:  MOVLW  7C
2056:  MOVWF  FF6
2058:  MOVLW  01
205A:  MOVWF  FF7
205C:  MOVLW  12
205E:  MOVLB  2
2060:  MOVWF  x01
2062:  MOVLB  0
2064:  CALL   0C7A
2068:  MOVFF  6A,20C
206C:  MOVLW  1B
206E:  MOVLB  2
2070:  MOVWF  x0D
2072:  MOVLB  0
2074:  CALL   05B4
2078:  MOVLW  90
207A:  MOVWF  FF6
207C:  MOVLW  01
207E:  MOVWF  FF7
2080:  MOVLW  09
2082:  MOVLB  2
2084:  MOVWF  x01
2086:  MOVLB  0
2088:  CALL   0C7A
....................          delay_ms(3000); 
208C:  MOVLW  0C
208E:  MOVWF  x6A
2090:  MOVLW  FA
2092:  MOVLB  2
2094:  MOVWF  x0F
2096:  MOVLB  0
2098:  CALL   026C
209C:  DECFSZ x6A,F
209E:  BRA    2090
....................          for(int i = address; i<10;i++){ 
20A0:  MOVFF  51,68
20A4:  MOVF   x68,W
20A6:  SUBLW  09
20A8:  BNC   2100
....................             memoria[i] = read_eeprom(i); 
20AA:  CLRF   03
20AC:  MOVF   x68,W
20AE:  ADDLW  53
20B0:  MOVWF  FE9
20B2:  MOVLW  00
20B4:  ADDWFC 03,W
20B6:  MOVWF  FEA
20B8:  MOVFF  FF2,6C
20BC:  BCF    FF2.7
20BE:  MOVFF  68,FA9
20C2:  BCF    FA6.6
20C4:  BCF    FA6.7
20C6:  BSF    FA6.0
20C8:  MOVF   FA8,W
20CA:  BTFSC  x6C.7
20CC:  BSF    FF2.7
20CE:  MOVWF  FEF
....................             memoria_index[i] = read_eeprom(i+offset); 
20D0:  CLRF   03
20D2:  MOVF   x68,W
20D4:  ADDLW  5D
20D6:  MOVWF  FE9
20D8:  MOVLW  00
20DA:  ADDWFC 03,W
20DC:  MOVWF  FEA
20DE:  MOVF   x67,W
20E0:  ADDWF  x68,W
20E2:  MOVWF  x6C
20E4:  MOVFF  FF2,6D
20E8:  BCF    FF2.7
20EA:  MOVFF  6C,FA9
20EE:  BCF    FA6.6
20F0:  BCF    FA6.7
20F2:  BSF    FA6.0
20F4:  MOVF   FA8,W
20F6:  BTFSC  x6D.7
20F8:  BSF    FF2.7
20FA:  MOVWF  FEF
20FC:  INCF   x68,F
20FE:  BRA    20A4
....................          } 
....................          for(int j = address+1; j<10;j++){ 
2100:  MOVLW  01
2102:  ADDWF  51,W
2104:  MOVWF  x69
2106:  MOVF   x69,W
2108:  SUBLW  09
210A:  BNC   2196
....................       
....................             write_eeprom(j,memoria[j-1]); 
210C:  MOVLW  01
210E:  SUBWF  x69,W
2110:  CLRF   03
2112:  ADDLW  53
2114:  MOVWF  FE9
2116:  MOVLW  00
2118:  ADDWFC 03,W
211A:  MOVWF  FEA
211C:  MOVFF  FEF,6A
2120:  MOVF   FF2,W
2122:  MOVWF  00
2124:  BCF    FF2.7
2126:  MOVFF  69,FA9
212A:  MOVFF  6A,FA8
212E:  BCF    FA6.6
2130:  BCF    FA6.7
2132:  BSF    FA6.2
2134:  MOVLB  F
2136:  MOVLW  55
2138:  MOVWF  FA7
213A:  MOVLW  AA
213C:  MOVWF  FA7
213E:  BSF    FA6.1
2140:  BTFSC  FA6.1
2142:  BRA    2140
2144:  BCF    FA6.2
2146:  MOVF   00,W
2148:  IORWF  FF2,F
....................             write_eeprom(j+offset,memoria_index[j-1]); 
214A:  MOVLB  0
214C:  MOVF   x67,W
214E:  ADDWF  x69,W
2150:  MOVWF  x6A
2152:  MOVLW  01
2154:  SUBWF  x69,W
2156:  CLRF   03
2158:  ADDLW  5D
215A:  MOVWF  FE9
215C:  MOVLW  00
215E:  ADDWFC 03,W
2160:  MOVWF  FEA
2162:  MOVFF  FEF,6B
2166:  MOVF   FF2,W
2168:  MOVWF  00
216A:  BCF    FF2.7
216C:  MOVFF  6A,FA9
2170:  MOVFF  6B,FA8
2174:  BCF    FA6.6
2176:  BCF    FA6.7
2178:  BSF    FA6.2
217A:  MOVLB  F
217C:  MOVLW  55
217E:  MOVWF  FA7
2180:  MOVLW  AA
2182:  MOVWF  FA7
2184:  BSF    FA6.1
2186:  BTFSC  FA6.1
2188:  BRA    2186
218A:  BCF    FA6.2
218C:  MOVF   00,W
218E:  IORWF  FF2,F
2190:  MOVLB  0
2192:  INCF   x69,F
2194:  BRA    2106
....................          } 
....................          write_eeprom(address,pontuacao); 
2196:  MOVF   FF2,W
2198:  MOVWF  00
219A:  BCF    FF2.7
219C:  MOVFF  51,FA9
21A0:  MOVFF  4F,FA8
21A4:  BCF    FA6.6
21A6:  BCF    FA6.7
21A8:  BSF    FA6.2
21AA:  MOVLB  F
21AC:  MOVLW  55
21AE:  MOVWF  FA7
21B0:  MOVLW  AA
21B2:  MOVWF  FA7
21B4:  BSF    FA6.1
21B6:  BTFSC  FA6.1
21B8:  BRA    21B6
21BA:  BCF    FA6.2
21BC:  MOVF   00,W
21BE:  IORWF  FF2,F
....................          write_eeprom(address+offset,index); 
21C0:  MOVLB  0
21C2:  MOVF   x67,W
21C4:  ADDWF  51,W
21C6:  MOVWF  x6A
21C8:  MOVF   FF2,W
21CA:  MOVWF  00
21CC:  BCF    FF2.7
21CE:  MOVFF  6A,FA9
21D2:  MOVFF  50,FA8
21D6:  BCF    FA6.6
21D8:  BCF    FA6.7
21DA:  BSF    FA6.2
21DC:  MOVLB  F
21DE:  MOVLW  55
21E0:  MOVWF  FA7
21E2:  MOVLW  AA
21E4:  MOVWF  FA7
21E6:  BSF    FA6.1
21E8:  BTFSC  FA6.1
21EA:  BRA    21E8
21EC:  BCF    FA6.2
21EE:  MOVF   00,W
21F0:  IORWF  FF2,F
....................          break; 
21F2:  MOVLB  0
21F4:  BRA    21FA
....................       } 
21F6:  INCF   51,F
21F8:  BRA    2018
....................    }  
21FA:  GOTO   2676 (RETURN)
.................... } 
....................  
....................  
.................... int listaMusicas(){ 
*
07A4:  MOVLW  01
07A6:  MOVWF  4E
....................     
....................    int index = 1; 
....................    printf(lcd_putc, "\f"); 
07A8:  MOVLW  0C
07AA:  MOVLB  2
07AC:  MOVWF  x0E
07AE:  MOVLB  0
07B0:  RCALL  0486
....................    lcd_gotoxy(1,1); 
07B2:  MOVLW  01
07B4:  MOVLB  2
07B6:  MOVWF  x0F
07B8:  MOVWF  x10
07BA:  MOVLB  0
07BC:  RCALL  0460
....................    printf(lcd_putc, "    MUSICAS:"); 
07BE:  MOVLW  9A
07C0:  MOVWF  FF6
07C2:  MOVLW  01
07C4:  MOVWF  FF7
07C6:  RCALL  04F2
....................    
....................    while(flag_control){ 
07C8:  BTFSS  4A.0
07CA:  BRA    08C0
....................       
....................       if(input(BTN_ENTER)) flag_ENTER = TRUE; 
07CC:  BSF    F94.6
07CE:  BTFSS  F82.6
07D0:  BRA    07D4
07D2:  BSF    4A.1
....................       if(input(BTN_UP)) flag_UP = TRUE; 
07D4:  MOVLW  EC
07D6:  MOVWF  F96
07D8:  BTFSS  F84.2
07DA:  BRA    07DE
07DC:  BSF    4A.4
....................       if(input(BTN_CLOSE)) flag_CLOSE = TRUE; 
07DE:  BSF    F94.7
07E0:  BTFSS  F82.7
07E2:  BRA    07E6
07E4:  BSF    4A.2
....................       if(input(BTN_DOWN)) flag_DOWN = TRUE; 
07E6:  BSF    F95.0
07E8:  BTFSS  F83.0
07EA:  BRA    07EE
07EC:  BSF    4A.3
....................        
....................       if(!input(BTN_UP) && flag_UP) { 
07EE:  MOVLW  EC
07F0:  MOVWF  F96
07F2:  BTFSC  F84.2
07F4:  BRA    0820
07F6:  BTFSS  4A.4
07F8:  BRA    0820
....................          flag_UP = FALSE; 
07FA:  BCF    4A.4
....................          if(index == 1) index = QUANT_MUSICAS; else index--; 
07FC:  DECFSZ 4E,W
07FE:  BRA    0806
0800:  MOVLW  04
0802:  MOVWF  4E
0804:  BRA    0808
0806:  DECF   4E,F
....................          lcd_gotoxy(1,2); 
0808:  MOVLW  01
080A:  MOVLB  2
080C:  MOVWF  x0F
080E:  MOVLW  02
0810:  MOVWF  x10
0812:  MOVLB  0
0814:  RCALL  0460
....................          printf(lcd_putc, "                "); 
0816:  MOVLW  A8
0818:  MOVWF  FF6
081A:  MOVLW  01
081C:  MOVWF  FF7
081E:  RCALL  04F2
....................           
....................       } 
....................       if(!input(BTN_DOWN) && flag_DOWN) { 
0820:  BSF    F95.0
0822:  BTFSC  F83.0
0824:  BRA    0852
0826:  BTFSS  4A.3
0828:  BRA    0852
....................          if(index == QUANT_MUSICAS) index = 1; else index++; 
082A:  MOVF   4E,W
082C:  SUBLW  04
082E:  BNZ   0836
0830:  MOVLW  01
0832:  MOVWF  4E
0834:  BRA    0838
0836:  INCF   4E,F
....................          lcd_gotoxy(1,2); 
0838:  MOVLW  01
083A:  MOVLB  2
083C:  MOVWF  x0F
083E:  MOVLW  02
0840:  MOVWF  x10
0842:  MOVLB  0
0844:  RCALL  0460
....................          printf(lcd_putc, "                "); 
0846:  MOVLW  BA
0848:  MOVWF  FF6
084A:  MOVLW  01
084C:  MOVWF  FF7
084E:  RCALL  04F2
....................          flag_DOWN = FALSE; 
0850:  BCF    4A.3
....................       } 
....................       lcd_gotoxy(1,2); 
0852:  MOVLW  01
0854:  MOVLB  2
0856:  MOVWF  x0F
0858:  MOVLW  02
085A:  MOVWF  x10
085C:  MOVLB  0
085E:  RCALL  0460
....................       printf(lcd_putc, "%u.%s", index, sound[index-1].titulo); 
0860:  MOVLW  01
0862:  SUBWF  4E,W
0864:  MULLW  11
0866:  MOVF   FF3,W
0868:  CLRF   50
086A:  MOVWF  4F
086C:  MOVLW  04
086E:  ADDWF  4F,W
0870:  MOVWF  01
0872:  MOVLW  00
0874:  ADDWFC 50,W
0876:  MOVWF  03
0878:  MOVFF  01,51
087C:  MOVWF  52
087E:  MOVFF  4E,20C
0882:  MOVLW  1B
0884:  MOVLB  2
0886:  MOVWF  x0D
0888:  MOVLB  0
088A:  RCALL  05B4
088C:  MOVLW  2E
088E:  MOVLB  2
0890:  MOVWF  x0E
0892:  MOVLB  0
0894:  RCALL  0486
0896:  MOVFF  52,FEA
089A:  MOVFF  51,FE9
089E:  RCALL  0630
....................    
....................       if(!input(BTN_ENTER) && flag_ENTER){  
08A0:  BSF    F94.6
08A2:  BTFSC  F82.6
08A4:  BRA    08AE
08A6:  BTFSS  4A.1
08A8:  BRA    08AE
....................         flag_ENTER = false; 
08AA:  BCF    4A.1
....................         flag_control = false; 
08AC:  BCF    4A.0
....................          
....................       } 
....................       if(!input(BTN_CLOSE) && flag_CLOSE){  
08AE:  BSF    F94.7
08B0:  BTFSC  F82.7
08B2:  BRA    08BE
08B4:  BTFSS  4A.2
08B6:  BRA    08BE
....................         flag_CLOSE = false; 
08B8:  BCF    4A.2
....................         flag_control = false; 
08BA:  BCF    4A.0
....................         index = 0; 
08BC:  CLRF   4E
....................       } 
08BE:  BRA    07C8
....................     
....................    } 
....................     
....................    return index; 
08C0:  MOVFF  4E,01
08C4:  GOTO   264A (RETURN)
.................... } 
....................  
....................  
....................  
.................... void records(){ 
*
21FE:  MOVLW  01
2200:  MOVWF  4E
....................  
.................... int index = 1; 
.................... printf(lcd_putc,"\f"); 
2202:  MOVLW  0C
2204:  MOVLB  2
2206:  MOVWF  x0E
2208:  MOVLB  0
220A:  CALL   0486
....................    
....................    while(flag_control){ 
220E:  BTFSS  4A.0
2210:  BRA    238C
....................       
....................       
....................       if(input(BTN_UP)) flag_UP = TRUE; 
2212:  MOVLW  EC
2214:  MOVWF  F96
2216:  BTFSS  F84.2
2218:  BRA    221C
221A:  BSF    4A.4
....................       if(input(BTN_CLOSE)) flag_CLOSE = TRUE; 
221C:  BSF    F94.7
221E:  BTFSS  F82.7
2220:  BRA    2224
2222:  BSF    4A.2
....................       if(input(BTN_DOWN)) flag_DOWN = TRUE; 
2224:  BSF    F95.0
2226:  BTFSS  F83.0
2228:  BRA    222C
222A:  BSF    4A.3
....................        
....................       if(!input(BTN_UP) && flag_UP) { 
222C:  MOVLW  EC
222E:  MOVWF  F96
2230:  BTFSC  F84.2
2232:  BRA    2262
2234:  BTFSS  4A.4
2236:  BRA    2262
....................          flag_UP = FALSE; 
2238:  BCF    4A.4
....................          if(index == 1) index = 10; else index--; 
223A:  DECFSZ 4E,W
223C:  BRA    2244
223E:  MOVLW  0A
2240:  MOVWF  4E
2242:  BRA    2246
2244:  DECF   4E,F
....................          lcd_gotoxy(1,2); 
2246:  MOVLW  01
2248:  MOVLB  2
224A:  MOVWF  x0F
224C:  MOVLW  02
224E:  MOVWF  x10
2250:  MOVLB  0
2252:  CALL   0460
....................          printf(lcd_putc, "                "); 
2256:  MOVLW  CC
2258:  MOVWF  FF6
225A:  MOVLW  01
225C:  MOVWF  FF7
225E:  CALL   04F2
....................           
....................       } 
....................       if(!input(BTN_DOWN) && flag_DOWN) { 
2262:  BSF    F95.0
2264:  BTFSC  F83.0
2266:  BRA    2298
2268:  BTFSS  4A.3
226A:  BRA    2298
....................          if(index == 10) index = 1; else index++; 
226C:  MOVF   4E,W
226E:  SUBLW  0A
2270:  BNZ   2278
2272:  MOVLW  01
2274:  MOVWF  4E
2276:  BRA    227A
2278:  INCF   4E,F
....................          lcd_gotoxy(1,2); 
227A:  MOVLW  01
227C:  MOVLB  2
227E:  MOVWF  x0F
2280:  MOVLW  02
2282:  MOVWF  x10
2284:  MOVLB  0
2286:  CALL   0460
....................          printf(lcd_putc, "                "); 
228A:  MOVLW  DE
228C:  MOVWF  FF6
228E:  MOVLW  01
2290:  MOVWF  FF7
2292:  CALL   04F2
....................          flag_DOWN = FALSE; 
2296:  BCF    4A.3
....................       } 
....................        
....................       int8 tituloMusicaAtual = read_eeprom(index-1+10); 
....................       int8 pontMusicaAtual = read_eeprom(index-1); 
2298:  MOVLW  01
229A:  SUBWF  4E,W
229C:  ADDLW  0A
229E:  MOVWF  51
22A0:  MOVFF  FF2,52
22A4:  BCF    FF2.7
22A6:  MOVFF  51,FA9
22AA:  BCF    FA6.6
22AC:  BCF    FA6.7
22AE:  BSF    FA6.0
22B0:  MOVF   FA8,W
22B2:  BTFSC  52.7
22B4:  BSF    FF2.7
22B6:  MOVWF  4F
22B8:  MOVLW  01
22BA:  SUBWF  4E,W
22BC:  MOVWF  51
22BE:  MOVFF  FF2,53
22C2:  BCF    FF2.7
22C4:  MOVFF  51,FA9
22C8:  BCF    FA6.6
22CA:  BCF    FA6.7
22CC:  BSF    FA6.0
22CE:  MOVF   FA8,W
22D0:  BTFSC  53.7
22D2:  BSF    FF2.7
22D4:  MOVWF  50
....................       lcd_gotoxy(1,1); 
22D6:  MOVLW  01
22D8:  MOVLB  2
22DA:  MOVWF  x0F
22DC:  MOVWF  x10
22DE:  MOVLB  0
22E0:  CALL   0460
....................       printf(lcd_putc, "%u.%s           ", index, sound[tituloMusicaAtual].titulo); 
22E4:  MOVF   4F,W
22E6:  MULLW  11
22E8:  MOVF   FF3,W
22EA:  CLRF   52
22EC:  MOVWF  51
22EE:  MOVLW  04
22F0:  ADDWF  51,W
22F2:  MOVWF  01
22F4:  MOVLW  00
22F6:  ADDWFC 52,W
22F8:  MOVWF  03
22FA:  MOVFF  01,53
22FE:  MOVWF  54
2300:  MOVFF  4E,20C
2304:  MOVLW  1B
2306:  MOVLB  2
2308:  MOVWF  x0D
230A:  MOVLB  0
230C:  CALL   05B4
2310:  MOVLW  2E
2312:  MOVLB  2
2314:  MOVWF  x0E
2316:  MOVLB  0
2318:  CALL   0486
231C:  MOVFF  54,FEA
2320:  MOVFF  53,FE9
2324:  CALL   0630
2328:  MOVLW  F5
232A:  MOVWF  FF6
232C:  MOVLW  01
232E:  MOVWF  FF7
2330:  MOVLW  0B
2332:  MOVLB  2
2334:  MOVWF  x01
2336:  MOVLB  0
2338:  CALL   0C7A
....................       lcd_gotoxy(1,2); 
233C:  MOVLW  01
233E:  MOVLB  2
2340:  MOVWF  x0F
2342:  MOVLW  02
2344:  MOVWF  x10
2346:  MOVLB  0
2348:  CALL   0460
....................       printf(lcd_putc, "Pontuacao: %u%%", pontMusicaAtual); 
234C:  MOVLW  02
234E:  MOVWF  FF6
2350:  MOVLW  02
2352:  MOVWF  FF7
2354:  MOVLW  0B
2356:  MOVLB  2
2358:  MOVWF  x01
235A:  MOVLB  0
235C:  CALL   0C7A
2360:  MOVFF  50,20C
2364:  MOVLW  1B
2366:  MOVLB  2
2368:  MOVWF  x0D
236A:  MOVLB  0
236C:  CALL   05B4
2370:  MOVLW  25
2372:  MOVLB  2
2374:  MOVWF  x0E
2376:  MOVLB  0
2378:  CALL   0486
....................       
....................       if(!input(BTN_CLOSE) && flag_CLOSE){  
237C:  BSF    F94.7
237E:  BTFSC  F82.7
2380:  BRA    238A
2382:  BTFSS  4A.2
2384:  BRA    238A
....................         flag_CLOSE = false; 
2386:  BCF    4A.2
....................         flag_control = false; 
2388:  BCF    4A.0
....................       } 
238A:  BRA    220E
....................     
....................    } 
238C:  GOTO   267A (RETURN)
....................     
.................... } 
....................  
....................  
.................... int menuPrincipal(){ 
*
0690:  MOVLW  01
0692:  MOVWF  5E
....................     
....................     
....................    char tituloMenu[2][8] = {"MUSICAS", "RECORDS"}; 
*
0654:  MOVLW  4D
0656:  MOVWF  4E
0658:  MOVLW  55
065A:  MOVWF  4F
065C:  MOVLW  53
065E:  MOVWF  50
0660:  MOVLW  49
0662:  MOVWF  51
0664:  MOVLW  43
0666:  MOVWF  52
0668:  MOVLW  41
066A:  MOVWF  53
066C:  MOVLW  53
066E:  MOVWF  54
0670:  CLRF   55
0672:  MOVLW  52
0674:  MOVWF  56
0676:  MOVLW  45
0678:  MOVWF  57
067A:  MOVLW  43
067C:  MOVWF  58
067E:  MOVLW  4F
0680:  MOVWF  59
0682:  MOVLW  52
0684:  MOVWF  5A
0686:  MOVLW  44
0688:  MOVWF  5B
068A:  MOVLW  53
068C:  MOVWF  5C
068E:  CLRF   5D
....................    int index = 1; 
....................    printf(lcd_putc, "\f"); 
*
0694:  MOVLW  0C
0696:  MOVLB  2
0698:  MOVWF  x0E
069A:  MOVLB  0
069C:  RCALL  0486
....................    lcd_gotoxy(1,1); 
069E:  MOVLW  01
06A0:  MOVLB  2
06A2:  MOVWF  x0F
06A4:  MOVWF  x10
06A6:  MOVLB  0
06A8:  RCALL  0460
....................    printf(lcd_putc, " MENU PRINCIPAL "); 
06AA:  MOVLW  12
06AC:  MOVWF  FF6
06AE:  MOVLW  02
06B0:  MOVWF  FF7
06B2:  RCALL  04F2
....................     
....................    while(flag_control){ 
06B4:  BTFSS  4A.0
06B6:  BRA    0790
....................       
....................       if(input(BTN_UP)) flag_UP = TRUE; 
06B8:  MOVLW  EC
06BA:  MOVWF  F96
06BC:  BTFSS  F84.2
06BE:  BRA    06C2
06C0:  BSF    4A.4
....................       if(input(BTN_DOWN)) flag_DOWN = TRUE; 
06C2:  BSF    F95.0
06C4:  BTFSS  F83.0
06C6:  BRA    06CA
06C8:  BSF    4A.3
....................       if(input(BTN_ENTER)) flag_ENTER = TRUE; 
06CA:  BSF    F94.6
06CC:  BTFSS  F82.6
06CE:  BRA    06D2
06D0:  BSF    4A.1
....................        
....................       if(!input(BTN_UP) && flag_UP) { 
06D2:  MOVLW  EC
06D4:  MOVWF  F96
06D6:  BTFSC  F84.2
06D8:  BRA    0704
06DA:  BTFSS  4A.4
06DC:  BRA    0704
....................          flag_UP = FALSE; 
06DE:  BCF    4A.4
....................          if(index == 1) index = 2; else index--; 
06E0:  DECFSZ 5E,W
06E2:  BRA    06EA
06E4:  MOVLW  02
06E6:  MOVWF  5E
06E8:  BRA    06EC
06EA:  DECF   5E,F
....................          lcd_gotoxy(1,2); 
06EC:  MOVLW  01
06EE:  MOVLB  2
06F0:  MOVWF  x0F
06F2:  MOVLW  02
06F4:  MOVWF  x10
06F6:  MOVLB  0
06F8:  RCALL  0460
....................          printf(lcd_putc, "                "); 
06FA:  MOVLW  24
06FC:  MOVWF  FF6
06FE:  MOVLW  02
0700:  MOVWF  FF7
0702:  RCALL  04F2
....................           
....................       } 
....................       if(!input(BTN_DOWN) && flag_DOWN) { 
0704:  BSF    F95.0
0706:  BTFSC  F83.0
0708:  BRA    0736
070A:  BTFSS  4A.3
070C:  BRA    0736
....................          if(index == 2) index = 1; else index++; 
070E:  MOVF   5E,W
0710:  SUBLW  02
0712:  BNZ   071A
0714:  MOVLW  01
0716:  MOVWF  5E
0718:  BRA    071C
071A:  INCF   5E,F
....................          lcd_gotoxy(1,2); 
071C:  MOVLW  01
071E:  MOVLB  2
0720:  MOVWF  x0F
0722:  MOVLW  02
0724:  MOVWF  x10
0726:  MOVLB  0
0728:  RCALL  0460
....................          printf(lcd_putc, "                "); 
072A:  MOVLW  36
072C:  MOVWF  FF6
072E:  MOVLW  02
0730:  MOVWF  FF7
0732:  RCALL  04F2
....................          flag_DOWN = FALSE; 
0734:  BCF    4A.3
....................       } 
....................        
....................       lcd_gotoxy(1,2); 
0736:  MOVLW  01
0738:  MOVLB  2
073A:  MOVWF  x0F
073C:  MOVLW  02
073E:  MOVWF  x10
0740:  MOVLB  0
0742:  RCALL  0460
....................       printf(lcd_putc, "%u.%s", index, tituloMenu[index-1]); 
0744:  MOVLW  01
0746:  SUBWF  5E,W
0748:  MULLW  08
074A:  MOVF   FF3,W
074C:  CLRF   03
074E:  ADDLW  4E
0750:  MOVWF  01
0752:  MOVLW  00
0754:  ADDWFC 03,F
0756:  MOVFF  01,5F
075A:  MOVFF  03,60
075E:  MOVFF  5E,20C
0762:  MOVLW  1B
0764:  MOVLB  2
0766:  MOVWF  x0D
0768:  MOVLB  0
076A:  RCALL  05B4
076C:  MOVLW  2E
076E:  MOVLB  2
0770:  MOVWF  x0E
0772:  MOVLB  0
0774:  RCALL  0486
0776:  MOVFF  60,FEA
077A:  MOVFF  5F,FE9
077E:  RCALL  0630
....................        
....................       if(!input(BTN_ENTER) && flag_ENTER){  
0780:  BSF    F94.6
0782:  BTFSC  F82.6
0784:  BRA    078E
0786:  BTFSS  4A.1
0788:  BRA    078E
....................          flag_ENTER = false; 
078A:  BCF    4A.1
....................          flag_control = false; 
078C:  BCF    4A.0
....................       } 
078E:  BRA    06B4
....................    } 
....................     
....................    if (index==1) return 1; else return 2; 
0790:  DECFSZ 5E,W
0792:  BRA    079C
0794:  MOVLW  01
0796:  MOVWF  01
0798:  BRA    07A0
079A:  BRA    07A0
079C:  MOVLW  02
079E:  MOVWF  01
07A0:  GOTO   263C (RETURN)
.................... } 
....................  
....................  
.................... void qualificarPrecisao(int8 index, int8 acertos_nota){  
.................... char texto[12]; 
....................    switch(acertos_nota){ 
*
0B0C:  MOVLB  1
0B0E:  MOVF   xFF,W
0B10:  ADDLW  FA
0B12:  BTFSC  FD8.0
0B14:  BRA    0C10
0B16:  ADDLW  06
0B18:  MOVLB  0
0B1A:  GOTO   0C54
....................       case 0: 
....................       texto = "ERROU"; 
0B1E:  MOVLW  02
0B20:  MOVWF  FEA
0B22:  CLRF   FE9
0B24:  MOVFF  FF2,20C
0B28:  BCF    FF2.7
0B2A:  MOVLW  00
0B2C:  CALL   008E
0B30:  TBLRD*-
0B32:  TBLRD*+
0B34:  MOVF   FF5,W
0B36:  MOVWF  FEE
0B38:  IORLW  00
0B3A:  BNZ   0B32
0B3C:  MOVLB  2
0B3E:  BTFSC  x0C.7
0B40:  BSF    FF2.7
....................       break; 
0B42:  MOVLB  1
0B44:  BRA    0C10
....................       case 1: 
....................       texto = "PESSIMO"; 
0B46:  MOVLW  02
0B48:  MOVWF  FEA
0B4A:  CLRF   FE9
0B4C:  MOVFF  FF2,20C
0B50:  BCF    FF2.7
0B52:  MOVLW  00
0B54:  CALL   00A4
0B58:  TBLRD*-
0B5A:  TBLRD*+
0B5C:  MOVF   FF5,W
0B5E:  MOVWF  FEE
0B60:  IORLW  00
0B62:  BNZ   0B5A
0B64:  MOVLB  2
0B66:  BTFSC  x0C.7
0B68:  BSF    FF2.7
....................       break; 
0B6A:  MOVLB  1
0B6C:  BRA    0C10
....................       case 2: 
....................       texto = "RUIM"; 
0B6E:  MOVLW  02
0B70:  MOVWF  FEA
0B72:  CLRF   FE9
0B74:  MOVFF  FF2,20C
0B78:  BCF    FF2.7
0B7A:  MOVLW  00
0B7C:  CALL   00BC
0B80:  TBLRD*-
0B82:  TBLRD*+
0B84:  MOVF   FF5,W
0B86:  MOVWF  FEE
0B88:  IORLW  00
0B8A:  BNZ   0B82
0B8C:  MOVLB  2
0B8E:  BTFSC  x0C.7
0B90:  BSF    FF2.7
....................       break; 
0B92:  MOVLB  1
0B94:  BRA    0C10
....................       case 3: 
....................       texto = "REGULAR"; 
0B96:  MOVLW  02
0B98:  MOVWF  FEA
0B9A:  CLRF   FE9
0B9C:  MOVFF  FF2,20C
0BA0:  BCF    FF2.7
0BA2:  MOVLW  00
0BA4:  CALL   00D2
0BA8:  TBLRD*-
0BAA:  TBLRD*+
0BAC:  MOVF   FF5,W
0BAE:  MOVWF  FEE
0BB0:  IORLW  00
0BB2:  BNZ   0BAA
0BB4:  MOVLB  2
0BB6:  BTFSC  x0C.7
0BB8:  BSF    FF2.7
....................       break; 
0BBA:  MOVLB  1
0BBC:  BRA    0C10
....................       case 4: 
....................       texto = "BOM"; 
0BBE:  MOVLW  02
0BC0:  MOVWF  FEA
0BC2:  CLRF   FE9
0BC4:  MOVFF  FF2,20C
0BC8:  BCF    FF2.7
0BCA:  MOVLW  00
0BCC:  CALL   00EA
0BD0:  TBLRD*-
0BD2:  TBLRD*+
0BD4:  MOVF   FF5,W
0BD6:  MOVWF  FEE
0BD8:  IORLW  00
0BDA:  BNZ   0BD2
0BDC:  MOVLB  2
0BDE:  BTFSC  x0C.7
0BE0:  BSF    FF2.7
....................       break; 
0BE2:  MOVLB  1
0BE4:  BRA    0C10
....................       case 5: 
....................       texto = "PERFEITO!!"; 
0BE6:  MOVLW  02
0BE8:  MOVWF  FEA
0BEA:  CLRF   FE9
0BEC:  MOVFF  FF2,20C
0BF0:  BCF    FF2.7
0BF2:  MOVLW  00
0BF4:  CALL   00FE
0BF8:  TBLRD*-
0BFA:  TBLRD*+
0BFC:  MOVF   FF5,W
0BFE:  MOVWF  FEE
0C00:  IORLW  00
0C02:  BNZ   0BFA
0C04:  MOVLB  2
0C06:  BTFSC  x0C.7
0C08:  BSF    FF2.7
....................       break; 
0C0A:  MOVLB  1
0C0C:  BRA    0C10
0C0E:  MOVLB  1
....................    } 
....................    lcd_gotoxy(1,1); 
0C10:  MOVLW  01
0C12:  MOVLB  2
0C14:  MOVWF  x0F
0C16:  MOVWF  x10
0C18:  MOVLB  0
0C1A:  RCALL  0460
....................    printf(lcd_putc,"\f%u. %s", index, texto); 
0C1C:  MOVLW  0C
0C1E:  MOVLB  2
0C20:  MOVWF  x0E
0C22:  MOVLB  0
0C24:  RCALL  0486
0C26:  MOVFF  1FE,20C
0C2A:  MOVLW  1B
0C2C:  MOVLB  2
0C2E:  MOVWF  x0D
0C30:  MOVLB  0
0C32:  RCALL  05B4
0C34:  MOVLW  2E
0C36:  MOVLB  2
0C38:  MOVWF  x0E
0C3A:  MOVLB  0
0C3C:  RCALL  0486
0C3E:  MOVLW  20
0C40:  MOVLB  2
0C42:  MOVWF  x0E
0C44:  MOVLB  0
0C46:  RCALL  0486
0C48:  MOVLW  02
0C4A:  MOVWF  FEA
0C4C:  CLRF   FE9
0C4E:  RCALL  0630
0C50:  GOTO   1DA6 (RETURN)
.................... } 
....................  
.................... void animacaoLogo(){ 
*
0512:  CLRF   4E
....................    int x = 0; 
....................    while(x<5){ 
0514:  MOVF   4E,W
0516:  SUBLW  04
0518:  BNC   055A
....................       printf(lcd_putc,"\f"); 
051A:  MOVLW  0C
051C:  MOVLB  2
051E:  MOVWF  x0E
0520:  MOVLB  0
0522:  RCALL  0486
....................       delay_ms(250); 
0524:  MOVLW  FA
0526:  MOVLB  2
0528:  MOVWF  x0F
052A:  MOVLB  0
052C:  RCALL  026C
....................       lcd_gotoxy(1,1); 
052E:  MOVLW  01
0530:  MOVLB  2
0532:  MOVWF  x0F
0534:  MOVWF  x10
0536:  MOVLB  0
0538:  RCALL  0460
....................       printf(lcd_putc, "HARP LASER MUSIC"); 
053A:  MOVLW  48
053C:  MOVWF  FF6
053E:  MOVLW  02
0540:  MOVWF  FF7
0542:  RCALL  04F2
....................       delay_ms(350); 
0544:  MOVLW  02
0546:  MOVWF  4F
0548:  MOVLW  AF
054A:  MOVLB  2
054C:  MOVWF  x0F
054E:  MOVLB  0
0550:  RCALL  026C
0552:  DECFSZ 4F,F
0554:  BRA    0548
....................       x++; 
0556:  INCF   4E,F
0558:  BRA    0514
....................    } 
....................     
....................    lcd_gotoxy(1,2); 
055A:  MOVLW  01
055C:  MOVLB  2
055E:  MOVWF  x0F
0560:  MOVLW  02
0562:  MOVWF  x10
0564:  MOVLB  0
0566:  RCALL  0460
....................    printf(lcd_putc, "+-+PLAY GAME!+-+"); 
0568:  MOVLW  5A
056A:  MOVWF  FF6
056C:  MOVLW  02
056E:  MOVWF  FF7
0570:  RCALL  04F2
....................    delay_ms(2000); 
0572:  MOVLW  08
0574:  MOVWF  4F
0576:  MOVLW  FA
0578:  MOVLB  2
057A:  MOVWF  x0F
057C:  MOVLB  0
057E:  RCALL  026C
0580:  DECFSZ 4F,F
0582:  BRA    0576
0584:  GOTO   2638 (RETURN)
.................... } 
....................  
.................... void apagarLeds(){ 
....................    output_low(LED1); 
*
08C8:  MOVLW  E0
08CA:  MOVWF  F92
08CC:  BCF    F89.0
....................    output_low(LED2); 
08CE:  MOVWF  F92
08D0:  BCF    F89.1
....................    output_low(LED3); 
08D2:  MOVWF  F92
08D4:  BCF    F89.2
....................    output_low(LED4); 
08D6:  MOVWF  F92
08D8:  BCF    F89.3
....................    output_low(LED5); 
08DA:  MOVWF  F92
08DC:  BCF    F89.4
....................    output_low(LED6); 
08DE:  BCF    F94.2
08E0:  BCF    F8B.2
....................    output_low(LED7); 
08E2:  MOVLW  EC
08E4:  MOVWF  F96
08E6:  BCF    F8D.0
....................    output_low(LED8); 
08E8:  MOVWF  F96
08EA:  BCF    F8D.1
08EC:  RETURN 0
.................... } 
....................  
.................... void ledEffect(){ 
*
0956:  CLRF   4E
....................    int i = 0; 
....................    while(i<10){ 
0958:  MOVF   4E,W
095A:  SUBLW  09
095C:  BNC   0A02
....................        
....................       notesToLEds(DO_3); 
095E:  MOVLW  FE
0960:  MOVLB  2
0962:  MOVWF  x01
0964:  MOVLB  0
0966:  RCALL  08EE
....................       delay_ms(50); 
0968:  MOVLW  32
096A:  MOVLB  2
096C:  MOVWF  x0F
096E:  MOVLB  0
0970:  RCALL  026C
....................         notesToLEds(RE_3); 
0972:  MOVLW  FD
0974:  MOVLB  2
0976:  MOVWF  x01
0978:  MOVLB  0
097A:  RCALL  08EE
....................       delay_ms(50); 
097C:  MOVLW  32
097E:  MOVLB  2
0980:  MOVWF  x0F
0982:  MOVLB  0
0984:  RCALL  026C
....................         notesToLEds(MI_3); 
0986:  MOVLW  FB
0988:  MOVLB  2
098A:  MOVWF  x01
098C:  MOVLB  0
098E:  RCALL  08EE
....................       delay_ms(50); 
0990:  MOVLW  32
0992:  MOVLB  2
0994:  MOVWF  x0F
0996:  MOVLB  0
0998:  RCALL  026C
....................         notesToLEds(FA_3); 
099A:  MOVLW  F7
099C:  MOVLB  2
099E:  MOVWF  x01
09A0:  MOVLB  0
09A2:  RCALL  08EE
....................       delay_ms(50); 
09A4:  MOVLW  32
09A6:  MOVLB  2
09A8:  MOVWF  x0F
09AA:  MOVLB  0
09AC:  RCALL  026C
....................         notesToLEds(SOL_3); 
09AE:  MOVLW  EF
09B0:  MOVLB  2
09B2:  MOVWF  x01
09B4:  MOVLB  0
09B6:  RCALL  08EE
....................       delay_ms(50); 
09B8:  MOVLW  32
09BA:  MOVLB  2
09BC:  MOVWF  x0F
09BE:  MOVLB  0
09C0:  RCALL  026C
....................         notesToLEds(LA_3); 
09C2:  MOVLW  DF
09C4:  MOVLB  2
09C6:  MOVWF  x01
09C8:  MOVLB  0
09CA:  RCALL  08EE
....................       delay_ms(50); 
09CC:  MOVLW  32
09CE:  MOVLB  2
09D0:  MOVWF  x0F
09D2:  MOVLB  0
09D4:  RCALL  026C
....................         notesToLEds(SI_3); 
09D6:  MOVLW  BF
09D8:  MOVLB  2
09DA:  MOVWF  x01
09DC:  MOVLB  0
09DE:  RCALL  08EE
....................       delay_ms(50); 
09E0:  MOVLW  32
09E2:  MOVLB  2
09E4:  MOVWF  x0F
09E6:  MOVLB  0
09E8:  RCALL  026C
....................         notesToLEds(DO_4); 
09EA:  MOVLW  7F
09EC:  MOVLB  2
09EE:  MOVWF  x01
09F0:  MOVLB  0
09F2:  RCALL  08EE
....................       delay_ms(50); 
09F4:  MOVLW  32
09F6:  MOVLB  2
09F8:  MOVWF  x0F
09FA:  MOVLB  0
09FC:  RCALL  026C
....................       i++; 
09FE:  INCF   4E,F
0A00:  BRA    0958
....................    } 
0A02:  GOTO   0A28 (RETURN)
.................... } 
....................  
.................... void notesToLeds(int8 note){ 
....................    apagarLeds(); 
*
08EE:  RCALL  08C8
....................    switch(note){ 
08F0:  MOVLB  2
08F2:  MOVF   x01,W
08F4:  XORLW  FE
08F6:  MOVLB  0
08F8:  BZ    0918
08FA:  XORLW  03
08FC:  BZ    0920
08FE:  XORLW  06
0900:  BZ    0928
0902:  XORLW  0C
0904:  BZ    0930
0906:  XORLW  18
0908:  BZ    0938
090A:  XORLW  30
090C:  BZ    0940
090E:  XORLW  60
0910:  BZ    0946
0912:  XORLW  C0
0914:  BZ    094E
0916:  BRA    0954
....................       case 0b11111110: 
....................       output_high(LED1); 
0918:  MOVLW  E0
091A:  MOVWF  F92
091C:  BSF    F89.0
....................       break; 
091E:  BRA    0954
....................       case 0b11111101: 
....................       output_high(LED2); 
0920:  MOVLW  E0
0922:  MOVWF  F92
0924:  BSF    F89.1
....................       break; 
0926:  BRA    0954
....................       case 0b11111011: 
....................       output_high(LED3); 
0928:  MOVLW  E0
092A:  MOVWF  F92
092C:  BSF    F89.2
....................       break; 
092E:  BRA    0954
....................       case 0b11110111: 
....................       output_high(LED4); 
0930:  MOVLW  E0
0932:  MOVWF  F92
0934:  BSF    F89.3
....................       break; 
0936:  BRA    0954
....................       case 0b11101111: 
....................       output_high(LED5); 
0938:  MOVLW  E0
093A:  MOVWF  F92
093C:  BSF    F89.4
....................       break; 
093E:  BRA    0954
....................       case 0b11011111: 
....................       output_high(LED6); 
0940:  BCF    F94.2
0942:  BSF    F8B.2
....................       break; 
0944:  BRA    0954
....................       case 0b10111111: 
....................       output_high(LED7); 
0946:  MOVLW  EC
0948:  MOVWF  F96
094A:  BSF    F8D.0
....................       break; 
094C:  BRA    0954
....................       case 0b01111111: 
....................       output_high(LED8); 
094E:  MOVLW  EC
0950:  MOVWF  F96
0952:  BSF    F8D.1
....................       break; 
....................     
....................    } 
0954:  RETURN 0
.................... } 
....................  

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
